{"version":3,"sources":["webpack:///3.dist/bundle-webpack-lazy-loading.js","webpack:///./components/log-tail/log-demo.ngfactory.js","webpack:///./app-lazy/lazy-modules/redux.module.ts","webpack:///./components/log-tail/log-reducer.ts","webpack:///./components/log-tail/store.ts","webpack:///./components/log-tail/log-tail-service.ts","webpack:///./components/log-tail/log-action.ts","webpack:///./components/log-tail/log-entry.ts","webpack:///./components/log-tail/log-demo.ts","webpack:///./app-lazy/lazy-modules/redux.module.ngfactory.js","webpack:///./node_modules/@angular/forms/esm5/forms.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/observable/forkJoin.js","webpack:///./node_modules/rxjs/observable/ForkJoinObservable.js","webpack:///./node_modules/@angular/http/esm5/http.js"],"names":["webpackJsonp","86","module","__webpack_exports__","__webpack_require__","View_LogDemo_1","_l","core","_ck","_v","context","$implicit","text","severity","View_LogDemo_0","en","$event","ad","_co","component","generateLogEntry","_handleInput","target","value","onTouched","_compositionStart","_compositionEnd","msg","esm5_forms","p0_0","model","update","onChange","p1_0","common","ngForOf","transform","store","logEntries","ngClassUntouched","ngClassTouched","ngClassPristine","ngClassDirty","ngClassValid","ngClassInvalid","ngClassPending","View_LogDemo_Host_0","RenderType_LogDemo","store_Store","LogTailService","http","log_demo_LogDemo","Object","defineProperty","ReduxModule","Subject","logReducer","state","action","type","concat","data","Store","_this","this","dispatcher","log","logItems","subscribe","handleAction","asObservable","prototype","next","dispatchAction","getLogEntries","get","map","res","json","LogAction","LogEntry","LogDemo","logTailService","entry","undefined","ngOnInit","entries","styles_LogDemo","encapsulation","styles","LogDemoNgFactory","router","d","ReduxModuleNgFactory","path","92","isEmptyInputValue","length","isPresent","o","toObservable","r","obs","__WEBPACK_IMPORTED_MODULE_1__angular_core__","__WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__","Error","_executeValidators","control","validators","v","_executeAsyncValidators","_mergeErrors","arrayOfErrors","reduce","errors","__WEBPACK_IMPORTED_MODULE_0_tslib__","keys","_isAndroid","test","__WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__","getUserAgent","toLowerCase","normalizeValidator","validator","validate","c","normalizeAsyncValidator","unimplemented","_buildValueString","id","slice","_extractId","valueString","split","_buildValueString$1","_extractId$1","controlPath","name","parent","setUpControl","dir","_throwError","valueAccessor","Validators","compose","asyncValidator","composeAsync","writeValue","setUpViewChangePipeline","setUpModelChangePipeline","setUpBlurPipeline","setDisabledState","registerOnDisabledChange","isDisabled","_rawValidators","forEach","registerOnValidatorChange","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","registerOnChange","_noControlError","registerOnTouched","_clearChangeFns","newValue","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","_pendingTouched","markAsTouched","viewToModelUpdate","markAsDirty","setValue","emitModelToViewChange","emitModelEvent","setUpFormContainer","message","messageEnd","join","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","hasOwnProperty","change","isFirstChange","currentValue","isBuiltInAccessor","BUILTIN_ACCESSORS","some","a","constructor","syncPendingControls","form","directives","_syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","DefaultValueAccessor","removeDir","list","el","index","indexOf","splice","_find","delimiter","Array","FormGroup","controls","FormArray","at","coerceToValidator","validatorOrOpts","isOptionsObj","isArray","coerceToAsyncValidator","origAsyncValidator","asyncValidators","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","ControlContainer","NG_VALUE_ACCESSOR","COMPOSITION_BUFFER_MODE","NgControl","NgControlStatus","NgControlStatusGroup","NgModel","FormControlName","NgSelectOption","SelectControlValueAccessor","FormBuilder","FormControl","FormsModule","ReactiveFormsModule","InternalFormsSharedModule","NgNoValidate","NumberValueAccessor","RadioControlRegistry","NgSelectMultipleOption","__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__","n","__WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__","AbstractControlDirective","enumerable","configurable","valid","invalid","pending","disabled","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","reset","hasError","errorCode","getError","_super","apply","arguments","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","min","parseFloat","isNaN","actual","max","required","requiredTrue","email","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","charAt","RegExp","toString","requiredPattern","actualValue","presentValidators","filter","observables","call","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","CheckboxControlValueAccessor","multi","_renderer","_elementRef","_","setProperty","nativeElement","fn","decorators","args","selector","host","(change)","(blur)","providers","ctorParameters","DEFAULT_VALUE_ACCESSOR","_compositionMode","_composing","normalizedValue","(input)","(compositionstart)","(compositionend)","NUMBER_VALUE_ACCESSOR","_parent","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","_accessors","add","accessor","push","remove","i","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","_checkName","ngOnDestroy","_state","_fn","formControlName","_throwNameError","propDecorators","RANGE_VALUE_ACCESSOR","RangeValueAccessor","SELECT_VALUE_ACCESSOR","_optionMap","Map","_idCounter","_compareWith","set","JSON","stringify","_getOptionId","_getOptionValue","_registerOption","_i","_a","from","has","compareWith","_element","_select","_setElementValue","delete","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","ids_1","opt","_setSelected","selected","options","selectedOptions","item","val","_value","AbstractFormGroupDirective","_checkParentType","addFormGroup","formDirective","removeFormGroup","getFormGroup","_validators","_asyncValidators","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","AbstractControl","_onCollectionChange","_onDisabledChange","_updateOn","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","opts","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","disable","_updateValue","emitEvent","emit","_updateAncestors","changeFn","enable","setParent","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","x","_initObservables","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","_setUpdateStrategy","_onChange","_applyFormState","emitViewToModelChange","patchValue","condition","cb","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","subtreeUpdated","updated","child","k","_reduceValue","initValue","_registerControl","insert","removeAt","formDirectiveProvider","NgForm","resolvedPromise","Promise","resolve","submitted","_directives","ngSubmit","ngAfterViewInit","then","container","_findContainer","getControl","group","updateModel","onSubmit","onReset","resetForm","pop","(submit)","(reset)","outputs","exportAs","FormErrorExamples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","modelGroupProvider","NgModelGroup","formControlBinding","resolvedPromise$1","_registered","ngOnChanges","_checkForErrors","_setUpControl","_updateDisabled","_isStandalone","_setUpStandalone","standalone","disabledValue","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","console","warn","formControlBinding$1","FormControlDirective","_isControlChanged","formDirectiveProvider$1","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","_oldForm","sync","async","formGroupNameProvider","formArrayNameProvider","controlNameBinding","_added","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","EMAIL_VALIDATOR","EmailValidator","_enabled","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","parseInt","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","controlsConfig","extra","_reduceControls","array","_createControl","controlConfig","novalidate","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","declarations","exports","93","Observable_1","map_1","Observable","94","ForkJoinObservable_1","forkJoin","ForkJoinObservable","create","95","__extends","b","__","p","EmptyObservable_1","isArray_1","subscribeToResult_1","OuterSubscriber_1","sources","resultSelector","EmptyObservable","_subscribe","subscriber","ForkJoinSubscriber","destination","completed","haveValues","len","total","values","source","innerSubscription","subscribeToResult","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","complete","OuterSubscriber","96","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","getResponseURL","xhr","responseURL","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","strLen","charCodeAt","buffer","paramParser","rawParams","param","eqIdx","key","standardEncoding","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","urlEncodeParams","params","searchParams","URLSearchParams","element","append","httpRequest","backend","request","createConnection","response","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","search","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","Jsonp","BrowserXhr","XHRBackend","BaseRequestOptions","BaseResponseOptions","ResponseOptions","HttpModule","XSRFStrategy","__WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_1_tslib__","__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__","__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__","build","XMLHttpRequest","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Opaque","ContentType","NONE","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","_headers","_normalizedNames","fromResponseHeaderString","headersString","line","name_1","trim","getAll","lcName","mayBeSetNormalizedName","toJSON","serialized","statusText","ConnectionBackend","Connection","isSuccess","QueryEncoder","encodeKey","encodeValue","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","replaceAll","paramsList","Body","_body","parse","encodingHint","String","fromCharCode","Uint8Array","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","responseOptions_1","error","_responseData","onError","addEventListener","removeEventListener","finished","JSONPBackend","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","getBody","abort","contentType","_cookieName","_headerName","configureRequest","xsrfToken","getCookie","_browserXHR","_xsrfStrategy","_mergeSearchParams","_parseParams","objParams","_appendParam","Request","paramsArg","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","noop","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","useFactory","deps","useClass","JsonpModule"],"mappings":"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","file":"3.dist/bundle-webpack-lazy-loading.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 86:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/esm5/core.js\nvar core = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/add/operator/map.js\nvar map = __webpack_require__(93);\nvar map_default = /*#__PURE__*/__webpack_require__.n(map);\n\n// CONCATENATED MODULE: ./app-lazy/lazy-modules/redux.module.ts\n\nvar ReduxModule = (function () {\n    function ReduxModule() {\n    }\n    return ReduxModule;\n}());\n\n\n// EXTERNAL MODULE: ./node_modules/@angular/forms/esm5/forms.js\nvar esm5_forms = __webpack_require__(92);\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/esm5/common.js\nvar common = __webpack_require__(4);\n\n// EXTERNAL MODULE: ./node_modules/rxjs/Subject.js\nvar Subject = __webpack_require__(5);\nvar Subject_default = /*#__PURE__*/__webpack_require__.n(Subject);\n\n// CONCATENATED MODULE: ./components/log-tail/log-reducer.ts\nvar logReducer = function (state, action) {\n    if (state === void 0) { state = []; }\n    switch (action.type) {\n        case 'ADD_ENTRY':\n            return state.concat([action.data]);\n        case 'LOAD_ENTRIES':\n            return action.data;\n        default:\n            return state;\n    }\n};\n\n// CONCATENATED MODULE: ./components/log-tail/store.ts\n\n\nvar store_Store = (function () {\n    function Store() {\n        var _this = this;\n        this.dispatcher = new Subject[\"Subject\"]();\n        this.log = new Subject[\"Subject\"]();\n        this.logItems = [];\n        this.dispatcher.subscribe(function (action) { return _this.handleAction(action); });\n        this.logEntries = this.log.asObservable();\n    }\n    Store.prototype.handleAction = function (action) {\n        this.logItems = logReducer(this.logItems, action);\n        this.log.next(this.logItems);\n    };\n    Store.prototype.dispatchAction = function (action) {\n        this.dispatcher.next(action);\n    };\n    return Store;\n}());\n\n\n// EXTERNAL MODULE: ./node_modules/@angular/http/esm5/http.js\nvar http = __webpack_require__(96);\n\n// CONCATENATED MODULE: ./components/log-tail/log-tail-service.ts\n\nvar LogTailService = (function () {\n    function LogTailService(http) {\n        this.http = http;\n    }\n    LogTailService.prototype.getLogEntries = function () {\n        return this.http.get('./components/log-tail/log.json').map(function (res) { return res.json(); });\n    };\n    return LogTailService;\n}());\n\n\n// CONCATENATED MODULE: ./components/log-tail/log-action.ts\nvar LogAction = (function () {\n    function LogAction(type, data) {\n        this.type = type;\n        this.data = data;\n    }\n    return LogAction;\n}());\n\n\n// CONCATENATED MODULE: ./components/log-tail/log-entry.ts\nvar LogEntry = (function () {\n    function LogEntry(text, severity) {\n        this.text = text;\n        this.severity = severity;\n    }\n    return LogEntry;\n}());\n\n\n// CONCATENATED MODULE: ./components/log-tail/log-demo.ts\n\n\n\n\nvar log_demo_LogDemo = (function () {\n    function LogDemo(store, logTailService) {\n        this.store = store;\n        this.logTailService = logTailService;\n    }\n    LogDemo.prototype.generateLogEntry = function () {\n        var entry = new LogEntry(this.msg, this.severity);\n        this.store.dispatchAction(new LogAction('ADD_ENTRY', entry));\n        this.msg = '';\n        this.severity = undefined;\n    };\n    LogDemo.prototype.ngOnInit = function () {\n        var _this = this;\n        this.logTailService.getLogEntries().subscribe(function (res) { return _this.store.dispatchAction(new LogAction('LOAD_ENTRIES', res.entries)); });\n    };\n    return LogDemo;\n}());\n\n\n// CONCATENATED MODULE: ./components/log-tail/log-demo.ngfactory.js\n\n\n\n\n\n\n\nvar styles_LogDemo = [];\nvar RenderType_LogDemo = core[\"_13\" /* ɵcrt */]({ encapsulation: 2, styles: styles_LogDemo, data: {} });\n\nfunction View_LogDemo_1(_l) { return core[\"_37\" /* ɵvid */](0, [(_l()(), core[\"_15\" /* ɵeld */](0, 0, null, null, 4, \"tr\", [], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](1, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), core[\"_35\" /* ɵted */](2, null, [\"\", \"\"])), (_l()(), core[\"_15\" /* ɵeld */](3, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), core[\"_35\" /* ɵted */](4, null, [\"\", \"\"]))], null, function (_ck, _v) { var currVal_0 = _v.context.$implicit.text; _ck(_v, 2, 0, currVal_0); var currVal_1 = _v.context.$implicit.severity; _ck(_v, 4, 0, currVal_1); }); }\nfunction View_LogDemo_0(_l) { return core[\"_37\" /* ɵvid */](0, [(_l()(), core[\"_15\" /* ɵeld */](0, 0, null, null, 32, \"div\", [], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](1, 0, null, null, 1, \"h1\", [], null, null, null, null, null)), (_l()(), core[\"_35\" /* ɵted */](-1, null, [\"Error log state managed using Redux\"])), (_l()(), core[\"_15\" /* ɵeld */](3, 0, null, null, 1, \"button\", [[\"style\", \"margin-bottom: 10px;\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.generateLogEntry() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), core[\"_35\" /* ɵted */](-1, null, [\"Add new log entry\"])), (_l()(), core[\"_15\" /* ɵeld */](5, 0, null, null, 5, \"input\", [[\"placeholder\", \"message\"], [\"type\", \"text\"]], [[2, \"ng-untouched\", null], [2, \"ng-touched\", null], [2, \"ng-pristine\", null], [2, \"ng-dirty\", null], [2, \"ng-valid\", null], [2, \"ng-invalid\", null], [2, \"ng-pending\", null]], [[null, \"ngModelChange\"], [null, \"input\"], [null, \"blur\"], [null, \"compositionstart\"], [null, \"compositionend\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"input\" === en)) {\n        var pd_0 = (core[\"_28\" /* ɵnov */](_v, 6)._handleInput($event.target.value) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_1 = (core[\"_28\" /* ɵnov */](_v, 6).onTouched() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"compositionstart\" === en)) {\n        var pd_2 = (core[\"_28\" /* ɵnov */](_v, 6)._compositionStart() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"compositionend\" === en)) {\n        var pd_3 = (core[\"_28\" /* ɵnov */](_v, 6)._compositionEnd($event.target.value) !== false);\n        ad = (pd_3 && ad);\n    } if ((\"ngModelChange\" === en)) {\n        var pd_4 = ((_co.msg = $event) !== false);\n        ad = (pd_4 && ad);\n    } return ad; }, null, null)), core[\"_14\" /* ɵdid */](6, 16384, null, 0, esm5_forms[\"c\" /* DefaultValueAccessor */], [core[\"M\" /* Renderer2 */], core[\"n\" /* ElementRef */], [2, esm5_forms[\"a\" /* COMPOSITION_BUFFER_MODE */]]], null, null), core[\"_32\" /* ɵprd */](1024, null, esm5_forms[\"j\" /* NG_VALUE_ACCESSOR */], function (p0_0) { return [p0_0]; }, [esm5_forms[\"c\" /* DefaultValueAccessor */]]), core[\"_14\" /* ɵdid */](8, 671744, null, 0, esm5_forms[\"n\" /* NgModel */], [[8, null], [8, null], [8, null], [2, esm5_forms[\"j\" /* NG_VALUE_ACCESSOR */]]], { model: [0, \"model\"] }, { update: \"ngModelChange\" }), core[\"_32\" /* ɵprd */](2048, null, esm5_forms[\"k\" /* NgControl */], null, [esm5_forms[\"n\" /* NgModel */]]), core[\"_14\" /* ɵdid */](10, 16384, null, 0, esm5_forms[\"l\" /* NgControlStatus */], [esm5_forms[\"k\" /* NgControl */]], null, null), (_l()(), core[\"_15\" /* ɵeld */](11, 0, null, null, 6, \"input\", [[\"placeholder\", \"severity\"], [\"type\", \"number\"]], [[2, \"ng-untouched\", null], [2, \"ng-touched\", null], [2, \"ng-pristine\", null], [2, \"ng-dirty\", null], [2, \"ng-valid\", null], [2, \"ng-invalid\", null], [2, \"ng-pending\", null]], [[null, \"ngModelChange\"], [null, \"input\"], [null, \"blur\"], [null, \"compositionstart\"], [null, \"compositionend\"], [null, \"change\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"input\" === en)) {\n        var pd_0 = (core[\"_28\" /* ɵnov */](_v, 12)._handleInput($event.target.value) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_1 = (core[\"_28\" /* ɵnov */](_v, 12).onTouched() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"compositionstart\" === en)) {\n        var pd_2 = (core[\"_28\" /* ɵnov */](_v, 12)._compositionStart() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"compositionend\" === en)) {\n        var pd_3 = (core[\"_28\" /* ɵnov */](_v, 12)._compositionEnd($event.target.value) !== false);\n        ad = (pd_3 && ad);\n    } if ((\"change\" === en)) {\n        var pd_4 = (core[\"_28\" /* ɵnov */](_v, 13).onChange($event.target.value) !== false);\n        ad = (pd_4 && ad);\n    } if ((\"input\" === en)) {\n        var pd_5 = (core[\"_28\" /* ɵnov */](_v, 13).onChange($event.target.value) !== false);\n        ad = (pd_5 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_6 = (core[\"_28\" /* ɵnov */](_v, 13).onTouched() !== false);\n        ad = (pd_6 && ad);\n    } if ((\"ngModelChange\" === en)) {\n        var pd_7 = ((_co.severity = $event) !== false);\n        ad = (pd_7 && ad);\n    } return ad; }, null, null)), core[\"_14\" /* ɵdid */](12, 16384, null, 0, esm5_forms[\"c\" /* DefaultValueAccessor */], [core[\"M\" /* Renderer2 */], core[\"n\" /* ElementRef */], [2, esm5_forms[\"a\" /* COMPOSITION_BUFFER_MODE */]]], null, null), core[\"_14\" /* ɵdid */](13, 16384, null, 0, esm5_forms[\"t\" /* ɵbc */], [core[\"M\" /* Renderer2 */], core[\"n\" /* ElementRef */]], null, null), core[\"_32\" /* ɵprd */](1024, null, esm5_forms[\"j\" /* NG_VALUE_ACCESSOR */], function (p0_0, p1_0) { return [p0_0, p1_0]; }, [esm5_forms[\"c\" /* DefaultValueAccessor */], esm5_forms[\"t\" /* ɵbc */]]), core[\"_14\" /* ɵdid */](15, 671744, null, 0, esm5_forms[\"n\" /* NgModel */], [[8, null], [8, null], [8, null], [2, esm5_forms[\"j\" /* NG_VALUE_ACCESSOR */]]], { model: [0, \"model\"] }, { update: \"ngModelChange\" }), core[\"_32\" /* ɵprd */](2048, null, esm5_forms[\"k\" /* NgControl */], null, [esm5_forms[\"n\" /* NgModel */]]), core[\"_14\" /* ɵdid */](17, 16384, null, 0, esm5_forms[\"l\" /* NgControlStatus */], [esm5_forms[\"k\" /* NgControl */]], null, null), (_l()(), core[\"_15\" /* ɵeld */](18, 0, null, null, 11, \"table\", [[\"class\", \"table\"]], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](19, 0, null, null, 10, \"tbody\", [], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](20, 0, null, null, 6, \"tr\", [], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](21, 0, null, null, 2, \"td\", [], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](22, 0, null, null, 1, \"strong\", [], null, null, null, null, null)), (_l()(), core[\"_35\" /* ɵted */](-1, null, [\"Message\"])), (_l()(), core[\"_15\" /* ɵeld */](24, 0, null, null, 2, \"td\", [], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](25, 0, null, null, 1, \"strong\", [], null, null, null, null, null)), (_l()(), core[\"_35\" /* ɵted */](-1, null, [\"Severity\"])), (_l()(), core[\"_10\" /* ɵand */](16777216, null, null, 2, null, View_LogDemo_1)), core[\"_14\" /* ɵdid */](28, 802816, null, 0, common[\"j\" /* NgForOf */], [core[\"Y\" /* ViewContainerRef */], core[\"V\" /* TemplateRef */], core[\"y\" /* IterableDiffers */]], { ngForOf: [0, \"ngForOf\"] }, null), core[\"_30\" /* ɵpid */](131072, common[\"b\" /* AsyncPipe */], [core[\"i\" /* ChangeDetectorRef */]]), (_l()(), core[\"_15\" /* ɵeld */](30, 0, null, null, 2, \"h4\", [], null, null, null, null, null)), (_l()(), core[\"_15\" /* ɵeld */](31, 0, null, null, 1, \"a\", [[\"href\", \"http://www.syntaxsuccess.com/viewarticle/redux-in-angular-2.0\"]], null, null, null, null, null)), (_l()(), core[\"_35\" /* ɵted */](-1, null, [\"Read more here\"]))], function (_ck, _v) { var _co = _v.component; var currVal_7 = _co.msg; _ck(_v, 8, 0, currVal_7); var currVal_15 = _co.severity; _ck(_v, 15, 0, currVal_15); var currVal_16 = core[\"_36\" /* ɵunv */](_v, 28, 0, core[\"_28\" /* ɵnov */](_v, 29).transform(_co.store.logEntries)); _ck(_v, 28, 0, currVal_16); }, function (_ck, _v) { var currVal_0 = core[\"_28\" /* ɵnov */](_v, 10).ngClassUntouched; var currVal_1 = core[\"_28\" /* ɵnov */](_v, 10).ngClassTouched; var currVal_2 = core[\"_28\" /* ɵnov */](_v, 10).ngClassPristine; var currVal_3 = core[\"_28\" /* ɵnov */](_v, 10).ngClassDirty; var currVal_4 = core[\"_28\" /* ɵnov */](_v, 10).ngClassValid; var currVal_5 = core[\"_28\" /* ɵnov */](_v, 10).ngClassInvalid; var currVal_6 = core[\"_28\" /* ɵnov */](_v, 10).ngClassPending; _ck(_v, 5, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6); var currVal_8 = core[\"_28\" /* ɵnov */](_v, 17).ngClassUntouched; var currVal_9 = core[\"_28\" /* ɵnov */](_v, 17).ngClassTouched; var currVal_10 = core[\"_28\" /* ɵnov */](_v, 17).ngClassPristine; var currVal_11 = core[\"_28\" /* ɵnov */](_v, 17).ngClassDirty; var currVal_12 = core[\"_28\" /* ɵnov */](_v, 17).ngClassValid; var currVal_13 = core[\"_28\" /* ɵnov */](_v, 17).ngClassInvalid; var currVal_14 = core[\"_28\" /* ɵnov */](_v, 17).ngClassPending; _ck(_v, 11, 0, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14); }); }\nfunction View_LogDemo_Host_0(_l) { return core[\"_37\" /* ɵvid */](0, [(_l()(), core[\"_15\" /* ɵeld */](0, 0, null, null, 3, \"ng-component\", [], null, null, null, View_LogDemo_0, RenderType_LogDemo)), core[\"_32\" /* ɵprd */](512, null, store_Store, store_Store, []), core[\"_32\" /* ɵprd */](512, null, LogTailService, LogTailService, [http[\"d\" /* Http */]]), core[\"_14\" /* ɵdid */](3, 114688, null, 0, log_demo_LogDemo, [store_Store, LogTailService], null, null)], function (_ck, _v) { _ck(_v, 3, 0); }, null); }\nvar LogDemoNgFactory = core[\"_11\" /* ɵccf */](\"ng-component\", log_demo_LogDemo, View_LogDemo_Host_0, {}, {}, []);\n\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/esm5/router.js\nvar router = __webpack_require__(17);\n\n// CONCATENATED MODULE: ./app-lazy/lazy-modules/redux.module.ngfactory.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReduxModuleNgFactory\", function() { return ReduxModuleNgFactory; });\n\n\n\n\n\n\n\n\nvar ReduxModuleNgFactory = core[\"_12\" /* ɵcmf */](ReduxModule, [], function (_l) { return core[\"_25\" /* ɵmod */]([core[\"_26\" /* ɵmpd */](512, core[\"k\" /* ComponentFactoryResolver */], core[\"_8\" /* ɵCodegenComponentFactoryResolver */], [[8, [LogDemoNgFactory]], [3, core[\"k\" /* ComponentFactoryResolver */]], core[\"E\" /* NgModuleRef */]]), core[\"_26\" /* ɵmpd */](4608, common[\"m\" /* NgLocalization */], common[\"l\" /* NgLocaleLocalization */], [core[\"A\" /* LOCALE_ID */], [2, common[\"t\" /* ɵa */]]]), core[\"_26\" /* ɵmpd */](4608, esm5_forms[\"v\" /* ɵi */], esm5_forms[\"v\" /* ɵi */], []), core[\"_26\" /* ɵmpd */](4608, http[\"c\" /* BrowserXhr */], http[\"c\" /* BrowserXhr */], []), core[\"_26\" /* ɵmpd */](4608, http[\"g\" /* ResponseOptions */], http[\"b\" /* BaseResponseOptions */], []), core[\"_26\" /* ɵmpd */](5120, http[\"i\" /* XSRFStrategy */], http[\"j\" /* ɵa */], []), core[\"_26\" /* ɵmpd */](4608, http[\"h\" /* XHRBackend */], http[\"h\" /* XHRBackend */], [http[\"c\" /* BrowserXhr */], http[\"g\" /* ResponseOptions */], http[\"i\" /* XSRFStrategy */]]), core[\"_26\" /* ɵmpd */](4608, http[\"f\" /* RequestOptions */], http[\"a\" /* BaseRequestOptions */], []), core[\"_26\" /* ɵmpd */](5120, http[\"d\" /* Http */], http[\"k\" /* ɵb */], [http[\"h\" /* XHRBackend */], http[\"f\" /* RequestOptions */]]), core[\"_26\" /* ɵmpd */](512, common[\"c\" /* CommonModule */], common[\"c\" /* CommonModule */], []), core[\"_26\" /* ɵmpd */](512, esm5_forms[\"s\" /* ɵba */], esm5_forms[\"s\" /* ɵba */], []), core[\"_26\" /* ɵmpd */](512, esm5_forms[\"i\" /* FormsModule */], esm5_forms[\"i\" /* FormsModule */], []), core[\"_26\" /* ɵmpd */](512, http[\"e\" /* HttpModule */], http[\"e\" /* HttpModule */], []), core[\"_26\" /* ɵmpd */](512, router[\"m\" /* RouterModule */], router[\"m\" /* RouterModule */], [[2, router[\"r\" /* ɵa */]], [2, router[\"k\" /* Router */]]]), core[\"_26\" /* ɵmpd */](512, ReduxModule, ReduxModule, []), core[\"_26\" /* ɵmpd */](1024, router[\"i\" /* ROUTES */], function () { return [[{ path: \"\", component: log_demo_LogDemo }]]; }, [])]); });\n\n\n\n/***/ }),\n\n/***/ 92:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export AbstractControlDirective */\n/* unused harmony export AbstractFormGroupDirective */\n/* unused harmony export CheckboxControlValueAccessor */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ControlContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return NG_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return COMPOSITION_BUFFER_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DefaultValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return NgControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return NgControlStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return NgControlStatusGroup; });\n/* unused harmony export NgForm */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return NgModel; });\n/* unused harmony export NgModelGroup */\n/* unused harmony export RadioControlValueAccessor */\n/* unused harmony export FormControlDirective */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return FormControlName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return FormGroupDirective; });\n/* unused harmony export FormArrayName */\n/* unused harmony export FormGroupName */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return NgSelectOption; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return SelectControlValueAccessor; });\n/* unused harmony export SelectMultipleControlValueAccessor */\n/* unused harmony export CheckboxRequiredValidator */\n/* unused harmony export EmailValidator */\n/* unused harmony export MaxLengthValidator */\n/* unused harmony export MinLengthValidator */\n/* unused harmony export PatternValidator */\n/* unused harmony export RequiredValidator */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return FormBuilder; });\n/* unused harmony export AbstractControl */\n/* unused harmony export FormArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return FormControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return FormGroup; });\n/* unused harmony export NG_ASYNC_VALIDATORS */\n/* unused harmony export NG_VALIDATORS */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return Validators; });\n/* unused harmony export VERSION */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return FormsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return ReactiveFormsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return InternalFormsSharedModule; });\n/* unused harmony export ɵz */\n/* unused harmony export ɵx */\n/* unused harmony export ɵy */\n/* unused harmony export ɵa */\n/* unused harmony export ɵb */\n/* unused harmony export ɵc */\n/* unused harmony export ɵd */\n/* unused harmony export ɵe */\n/* unused harmony export ɵf */\n/* unused harmony export ɵg */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return NgNoValidate; });\n/* unused harmony export ɵbb */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return NumberValueAccessor; });\n/* unused harmony export ɵh */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return RadioControlRegistry; });\n/* unused harmony export ɵbd */\n/* unused harmony export ɵbe */\n/* unused harmony export ɵj */\n/* unused harmony export ɵk */\n/* unused harmony export ɵl */\n/* unused harmony export ɵn */\n/* unused harmony export ɵm */\n/* unused harmony export ɵo */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return NgSelectMultipleOption; });\n/* unused harmony export ɵp */\n/* unused harmony export ɵs */\n/* unused harmony export ɵt */\n/* unused harmony export ɵv */\n/* unused harmony export ɵu */\n/* unused harmony export ɵw */\n/* unused harmony export ɵr */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__ = __webpack_require__(37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__ = __webpack_require__(9);\n/**\n * @license Angular v6.0.0-beta.0\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControlDirective = /** @class */ (function () {\n    function AbstractControlDirective() {\n    }\n    Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n        /** The value of the control. */\n        get: /**\n         * The value of the control.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.value : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.valid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.invalid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pending : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.disabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.enabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n        /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         */\n        get: /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.errors : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pristine : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.dirty : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.touched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"status\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.control ? this.control.status : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.untouched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n        /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         */\n        get: /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.statusChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n        /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         */\n        get: /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.valueChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n        /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         */\n        get: /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {@link AbstractControl}.\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        if (this.control)\n            this.control.reset(value);\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    };\n    return AbstractControlDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A directive that contains multiple {\\@link NgControl}s.\n *\n * Only used by the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar ControlContainer = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(ControlContainer, _super);\n    function ControlContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n        /**\n         * Get the form to which this container belongs.\n         */\n        get: /**\n         * Get the form to which this container belongs.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ControlContainer.prototype, \"path\", {\n        /**\n         * Get the path to this container.\n         */\n        get: /**\n         * Get the path to this container.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return ControlContainer;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar NG_VALIDATORS = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"v\" /* InjectionToken */]('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {\\@link NG_VALIDATORS} for more details.\n *\n * \\@stable\n */\nvar NG_ASYNC_VALIDATORS = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"v\" /* InjectionToken */]('NgAsyncValidators');\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n *\n * \\@stable\n */\nvar Validators = /** @class */ (function () {\n    function Validators() {\n    }\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     *`min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     */\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    Validators.min = /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    function (min) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     */\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    Validators.max = /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    function (max) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a non-empty value.\n     */\n    /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.required = /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    };\n    /**\n     * Validator that requires control value to be true.\n     */\n    /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.requiredTrue = /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return control.value === true ? null : { 'required': true };\n    };\n    /**\n     * Validator that performs email validation.\n     */\n    /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.email = /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    };\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    Validators.minLength = /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    function (minLength) {\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    Validators.maxLength = /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    function (maxLength) {\n        return function (control) {\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires a control to match a regex to its value.\n     */\n    /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    Validators.pattern = /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    function (pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        var /** @type {?} */ regex;\n        var /** @type {?} */ regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    };\n    /**\n     * No-op validator.\n     */\n    /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    Validators.nullValidator = /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return null; };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.compose = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.composeAsync = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__[\"forkJoin\"])(observables), _mergeErrors);\n        };\n    };\n    return Validators;\n}());\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    var /** @type {?} */ obs = Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_21\" /* ɵisPromise */])(r) ? Object(__WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__[\"fromPromise\"])(r) : r;\n    if (!(Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_20\" /* ɵisObservable */])(obs))) {\n        throw new Error(\"Expected validator to return Promise or Observable.\");\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n        return errors != null ? Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __assign */])({}, /** @type {?} */ ((res)), errors) : /** @type {?} */ ((res));\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `ControlValueAccessor` acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface if you want to create a custom form control directive\n * that integrates with Angular forms.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n *\n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nvar NG_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"v\" /* InjectionToken */]('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return CheckboxControlValueAccessor; }),\n    multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar CheckboxControlValueAccessor = /** @class */ (function () {\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    CheckboxControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                    providers: [CHECKBOX_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n    ]; };\n    return CheckboxControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return DefaultValueAccessor; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    var /** @type {?} */ userAgent = Object(__WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__[\"r\" /* ɵgetDOM */])() ? Object(__WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__[\"r\" /* ɵgetDOM */])().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n */\nvar COMPOSITION_BUFFER_MODE = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"v\" /* InjectionToken */]('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar DefaultValueAccessor = /** @class */ (function () {\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._handleInput = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionStart = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { this._composing = true; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionEnd = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    };\n    DefaultValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                    // TODO: vsavkin replace the above selector with the one below it once\n                    // https://github.com/angular/angular/issues/3011 is implemented\n                    // selector: '[ngModel],[formControl],[formControlName]',\n                    host: {\n                        '(input)': '$any(this)._handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '$any(this)._compositionStart()',\n                        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                    },\n                    providers: [DEFAULT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    DefaultValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [COMPOSITION_BUFFER_MODE,] },] },\n    ]; };\n    return DefaultValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return NumberValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nvar NumberValueAccessor = /** @class */ (function () {\n    function NumberValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    NumberValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [NUMBER_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    NumberValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n    ]; };\n    return NumberValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n *\n * Used internally by Angular forms.\n *\n * \\@stable\n * @abstract\n */\nvar NgControl = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgControl, _super);\n    function NgControl() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * \\@internal\n         */\n        _this._parent = null;\n        _this.name = null;\n        _this.valueAccessor = null;\n        /**\n         * \\@internal\n         */\n        _this._rawValidators = [];\n        /**\n         * \\@internal\n         */\n        _this._rawAsyncValidators = [];\n        return _this;\n    }\n    Object.defineProperty(NgControl.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    return NgControl;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return RadioControlValueAccessor; }),\n    multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nvar RadioControlRegistry = /** @class */ (function () {\n    function RadioControlRegistry() {\n        this._accessors = [];\n    }\n    /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.add = /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (control, accessor) {\n        this._accessors.push([control, accessor]);\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.remove = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.select = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        var _this = this;\n        this._accessors.forEach(function (c) {\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    };\n    /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype._isSameGroup = /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    };\n    RadioControlRegistry.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    RadioControlRegistry.ctorParameters = function () { return []; };\n    return RadioControlRegistry;\n}());\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  \\@stable\n */\nvar RadioControlValueAccessor = /** @class */ (function () {\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this._registry.remove(this); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._fn = fn;\n        this.onChange = function () {\n            fn(_this.value);\n            _this._registry.select(_this);\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.fireUncheck = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.writeValue(value); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._throwNameError = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n    };\n    RadioControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [RADIO_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RadioControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n        { type: RadioControlRegistry, },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injector */], },\n    ]; };\n    RadioControlValueAccessor.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n        \"formControlName\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n        \"value\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return RadioControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return RangeValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nvar RangeValueAccessor = /** @class */ (function () {\n    function RangeValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    RangeValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [RANGE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RangeValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n    ]; };\n    return RangeValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return SelectControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar SelectControlValueAccessor = /** @class */ (function () {\n    function SelectControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_23\" /* ɵlooseIdentical */];\n    }\n    Object.defineProperty(SelectControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        var /** @type {?} */ id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        var /** @type {?} */ valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (valueString) {\n            _this.value = _this._getOptionValue(valueString);\n            fn(_this.value);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return (this._idCounter++).toString(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    };\n    SelectControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n    ]; };\n    SelectControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return SelectControlValueAccessor;\n}());\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * \\@howToUse\n *\n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n *\n * \\@stable\n */\nvar NgSelectOption = /** @class */ (function () {\n    function NgSelectOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._select._optionMap.set(this.id, value);\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._setElementValue(value);\n            if (this._select)\n                this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectOption.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectOption.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: SelectControlValueAccessor, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"q\" /* Host */] },] },\n    ]; };\n    NgSelectOption.propDecorators = {\n        \"ngValue\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngValue',] },],\n        \"value\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['value',] },],\n    };\n    return NgSelectOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return SelectMultipleControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (typeof value === 'string')\n        value = \"'\" + value + \"'\";\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n *  ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * \\@stable\n */\nvar SelectMultipleControlValueAccessor = /** @class */ (function () {\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_23\" /* ɵlooseIdentical */];\n    }\n    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        this.value = value;\n        var /** @type {?} */ optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (_) {\n            var /** @type {?} */ selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                var /** @type {?} */ options = _.selectedOptions;\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            else {\n                var /** @type {?} */ options = /** @type {?} */ (_.options);\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    if (opt.selected) {\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            _this.value = selected;\n            fn(selected);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? /** @type {?} */ ((this._optionMap.get(id)))._value : valueString;\n    };\n    SelectMultipleControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n    ]; };\n    SelectMultipleControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return SelectMultipleControlValueAccessor;\n}());\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nvar NgSelectMultipleOption = /** @class */ (function () {\n    function NgSelectMultipleOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select) {\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            }\n            else {\n                this._setElementValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setSelected = /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    function (selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectMultipleOption.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectMultipleOption.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"n\" /* ElementRef */], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"M\" /* Renderer2 */], },\n        { type: SelectMultipleControlValueAccessor, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"q\" /* Host */] },] },\n    ]; };\n    NgSelectMultipleOption.propDecorators = {\n        \"ngValue\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngValue',] },],\n        \"value\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['value',] },],\n    };\n    return NgSelectMultipleOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return /** @type {?} */ ((parent.path)).concat([name]);\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */\n    ((dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if (/** @type {?} */ ((dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange(function (isDisabled) { /** @type {?} */ ((/** @type {?} */ ((dir.valueAccessor)).setDisabledState))(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function () { return _noControlError(dir); }); /** @type {?} */\n    ((dir.valueAccessor)).registerOnTouched(function () { return _noControlError(dir); });\n    dir._rawValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function (newValue) {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnTouched(function () {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    dir.viewToModelUpdate(control._pendingValue);\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange(function (newValue, emitModelEvent) {\n        /** @type {?} */ ((\n        // control -> view\n        dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    var /** @type {?} */ messageEnd;\n    if (/** @type {?} */ ((dir.path)).length > 1) {\n        messageEnd = \"path: '\" + (/** @type {?} */ ((dir.path))).join(' -> ') + \"'\";\n    }\n    else if (/** @type {?} */ ((dir.path))[0]) {\n        messageEnd = \"name: '\" + dir.path + \"'\";\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(message + \" \" + messageEnd);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    var /** @type {?} */ change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_23\" /* ɵlooseIdentical */])(viewModel, change.currentValue);\n}\nvar BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(function (dir) {\n        var /** @type {?} */ control = /** @type {?} */ (dir.control);\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    var /** @type {?} */ defaultAccessor = undefined;\n    var /** @type {?} */ builtinAccessor = undefined;\n    var /** @type {?} */ customAccessor = undefined;\n    valueAccessors.forEach(function (v) {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n *\n * \\@stable\n */\nvar AbstractFormGroupDirective = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(AbstractFormGroupDirective, _super);\n    function AbstractFormGroupDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    };\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n        /**\n         * Get the {@link FormGroup} backing this binding.\n         */\n        get: /**\n         * Get the {\\@link FormGroup} backing this binding.\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormGroup(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n        /**\n         * Get the path to this control group.\n         */\n        get: /**\n         * Get the path to this control group.\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * Get the {@link Form} to which this group belongs.\n         */\n        get: /**\n         * Get the {\\@link Form} to which this group belongs.\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    return AbstractFormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AbstractControlStatus = /** @class */ (function () {\n    function AbstractControlStatus(cd) {\n        this._cd = cd;\n    }\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.untouched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.touched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pristine : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.dirty : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.valid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.invalid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pending : false; },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractControlStatus;\n}());\nvar ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@stable\n */\nvar NgControlStatus = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgControlStatus, _super);\n    function NgControlStatus(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatus.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n    ];\n    /** @nocollapse */\n    NgControlStatus.ctorParameters = function () { return [\n        { type: NgControl, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] },] },\n    ]; };\n    return NgControlStatus;\n}(AbstractControlStatus));\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatusGroup = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgControlStatusGroup, _super);\n    function NgControlStatusGroup(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatusGroup.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                    host: ngControlStatusHost\n                },] },\n    ];\n    /** @nocollapse */\n    NgControlStatusGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] },] },\n    ]; };\n    return NgControlStatusGroup;\n}(AbstractControlStatus));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = (/** @type {?} */ (path)).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return (/** @type {?} */ (path)).reduce(function (v, name) {\n        if (v instanceof FormGroup) {\n            return v.controls[name] || null;\n        }\n        if (v instanceof FormArray) {\n            return v.at(/** @type {?} */ (name)) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    var /** @type {?} */ validator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).validators :\n        validatorOrOpts));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    var /** @type {?} */ origAsyncValidator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).asyncValidators :\n        asyncValidator));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * @record\n */\n\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControl = /** @class */ (function () {\n    function AbstractControl(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = function () { };\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\n        /**\n         * The parent control.\n         */\n        get: /**\n         * The parent control.\n         * @return {?}\n         */\n        function () { return this._parent; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.status === VALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.status === INVALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.status == PENDING; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.status === DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.status !== DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return !this.pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return !this.touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"updateOn\", {\n        /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         */\n        get: /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         * @return {?}\n         */\n        function () {\n            return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     */\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setValidators = /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    };\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     */\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setAsyncValidators = /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    };\n    /**\n     * Empties out the sync validator list.\n     */\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearValidators = /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    function () { this.validator = null; };\n    /**\n     * Empties out the async validator list.\n     */\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearAsyncValidators = /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    function () { this.asyncValidator = null; };\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsTouched = /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsUntouched = /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsDirty = /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    };\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPristine = /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /**\n     * Marks the control as `pending`.\n     */\n    /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPending = /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = PENDING;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    };\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     */\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.disable = /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = DISABLED;\n        (/** @type {?} */ (this)).errors = null;\n        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n    };\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     */\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.enable = /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = VALID;\n        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n    };\n    /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    AbstractControl.prototype._updateAncestors = /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    function (onlySelf) {\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity();\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControl.prototype.setParent = /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function (parent) { this._parent = parent; };\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     */\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.updateValueAndValidity = /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            (/** @type {?} */ (this)).errors = this._runValidator();\n            (/** @type {?} */ (this)).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTreeValidity = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = { emitEvent: true }; }\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._setInitialStatus = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).status = this._allControlsDisabled() ? DISABLED : VALID;\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._runValidator = /**\n     * @return {?}\n     */\n    function () {\n        return this.validator ? this.validator(this) : null;\n    };\n    /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._runAsyncValidator = /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        var _this = this;\n        if (this.asyncValidator) {\n            (/** @type {?} */ (this)).status = PENDING;\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._cancelExistingSubscription = /**\n     * @return {?}\n     */\n    function () {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.setErrors = /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (errors, opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    };\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     */\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControl.prototype.get = /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) { return _find(this, path, '.'); };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        var /** @type {?} */ control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) { return !!this.getError(errorCode, path); };\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\n        /**\n         * Retrieves the top-level ancestor of this control.\n         */\n        get: /**\n         * Retrieves the top-level ancestor of this control.\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ x = this;\n            while (x._parent) {\n                x = x._parent;\n            }\n            return x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._updateControlsErrors = /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        (/** @type {?} */ (this)).status = this._calculateStatus();\n        if (emitEvent) {\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._initObservables = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).valueChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"p\" /* EventEmitter */]();\n        (/** @type {?} */ (this)).statusChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"p\" /* EventEmitter */]();\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._calculateStatus = /**\n     * @return {?}\n     */\n    function () {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsHaveStatus = /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    function (status) {\n        return this._anyControls(function (control) { return control.status === status; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsDirty = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.dirty; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsTouched = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.touched; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updatePristine = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTouched = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    AbstractControl.prototype._isBoxedValue = /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractControl.prototype._registerOnCollectionChange = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onCollectionChange = fn; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._setUpdateStrategy = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (isOptionsObj(opts) && (/** @type {?} */ (opts)).updateOn != null) {\n            this._updateOn = /** @type {?} */ (((/** @type {?} */ (opts)).updateOn));\n        }\n    };\n    return AbstractControl;\n}());\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * The second {\\@link FormControl} argument can accept one of three things:\n * * a sync validator function\n * * an array of sync validator functions\n * * an options object containing validator and/or async validator functions\n *\n * Example of a single sync validator function:\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * Example using options object:\n *\n * ```ts\n * const ctrl = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * The options object can also be used to define when the control should update.\n * By default, the value and validity of a control updates whenever the value\n * changes. You can configure it to update on the blur event instead by setting\n * the `updateOn` option to `'blur'`.\n *\n * ```ts\n * const c = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * You can also set `updateOn` to `'submit'`, which will delay value and validity\n * updates until the parent form of the control fires a submit event.\n *\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormControl = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormControl, _super);\n    function FormControl(formState, validatorOrOpts, asyncValidator) {\n        if (formState === void 0) { formState = null; }\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        /**\n         * \\@internal\n         */\n        _this._onChange = [];\n        _this._applyFormState(formState);\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        _this._initObservables();\n        return _this;\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     */\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.setValue = /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        (/** @type {?} */ (this)).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach(function (changeFn) { return changeFn(_this.value, options.emitViewToModelChange !== false); });\n        }\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     */\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.patchValue = /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (options === void 0) { options = {}; }\n        this.setValue(value, options);\n    };\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    function (formState, options) {\n        if (formState === void 0) { formState = null; }\n        if (options === void 0) { options = {}; }\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormControl.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) { return false; };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return this.disabled; };\n    /**\n     * Register a listener for change events.\n     */\n    /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnChange = /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange.push(fn); };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._clearChangeFns = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = function () { };\n    };\n    /**\n     * Register a listener for disabled events.\n     */\n    /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnDisabledChange = /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onDisabledChange.push(fn);\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormControl.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) { };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n    FormControl.prototype._applyFormState = /**\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        if (this._isBoxedValue(formState)) {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState;\n        }\n    };\n    return FormControl;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like {\\@link FormControl} instances, you can alternatively choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, {validators: passwordMatchValidator, asyncValidators: otherValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *    one: new FormControl()\n * }, {updateOn: 'blur'});\n * ```\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormGroup = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormGroup, _super);\n    function FormGroup(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {@link FormGroup#addControl addControl} instead.\n     */\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.registerControl = /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    };\n    /**\n     * Add a control to this group.\n     */\n    /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.addControl = /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove a control from this group.\n     */\n    /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype.removeControl = /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {@link AbstractControl#get get} instead.\n     */\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    FormGroup.prototype.contains = /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    function (controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    };\n    /**\n     *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(function (name) {\n            _this._throwIfControlMissing(name);\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        Object.keys(value).forEach(function (name) {\n            if (_this.controls[name]) {\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.reset = /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = {}; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, name) {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the {@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     */\n    /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    FormGroup.prototype.getRawValue = /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    function () {\n        return this._reduceChildren({}, function (acc, control, name) {\n            acc[name] = control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this._reduceChildren(false, function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.controls[name]) {\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormGroup.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        var _this = this;\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) {\n            control.setParent(_this);\n            control._registerOnCollectionChange(_this._onCollectionChange);\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).value = this._reduceValue(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormGroup.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        var _this = this;\n        var /** @type {?} */ res = false;\n        this._forEachChild(function (control, name) {\n            res = res || (_this.contains(name) && condition(control));\n        });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._reduceValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this._reduceChildren({}, function (acc, control, name) {\n            if (control.enabled || _this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    FormGroup.prototype._reduceChildren = /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    function (initValue, fn) {\n        var /** @type {?} */ res = initValue;\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n            var controlName = _a[_i];\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroup.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, name) {\n            if (value[name] === undefined) {\n                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n            }\n        });\n    };\n    return FormGroup;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n *\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators can be passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormArray = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormArray, _super);\n    function FormArray(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Get the {@link AbstractControl} at the given `index` in the array.\n     */\n    /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.at = /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) { return this.controls[index]; };\n    /**\n     * Insert a new {@link AbstractControl} at the end of the array.\n     */\n    /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.push = /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Insert a new {@link AbstractControl} at the given `index` in the array.\n     */\n    /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.insert = /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove the control at the given `index` in the array.\n     */\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.removeAt = /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    Object.defineProperty(FormArray.prototype, \"length\", {\n        /**\n         * Length of the control array.\n         */\n        get: /**\n         * Length of the control array.\n         * @return {?}\n         */\n        function () { return this.controls.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Sets the value of the {@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        value.forEach(function (newValue, index) {\n            _this._throwIfControlMissing(index);\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        value.forEach(function (newValue, index) {\n            if (_this.at(index)) {\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.reset = /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = []; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, index) {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     */\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    FormArray.prototype.getRawValue = /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    function () {\n        return this.controls.map(function (control) {\n            return control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this.controls.reduce(function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (!this.controls.length) {\n            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.at(index)) {\n            throw new Error(\"Cannot find form control at index \" + index);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormArray.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        this.controls.forEach(function (control, index) { cb(control, index); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        (/** @type {?} */ (this)).value =\n            this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormArray.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) { return _this._registerControl(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormArray.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, i) {\n            if (value[i] === undefined) {\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n            }\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n            var control = _a[_i];\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype._registerControl = /**\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    };\n    return FormArray;\n}(AbstractControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return NgForm; })\n};\nvar resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * \\@howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgForm = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgForm, _super);\n    function NgForm(validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this.submitted = false;\n        _this._directives = [];\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"p\" /* EventEmitter */]();\n        _this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () { this._setUpdateStrategy(); };\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"controls\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form.controls; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            (/** @type {?} */ (dir)).control = /** @type {?} */ (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            _this._directives.push(dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(_this._directives, dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            var /** @type {?} */ group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ ctrl = /** @type {?} */ (_this.form.get(/** @type {?} */ ((dir.path))));\n            ctrl.setValue(value);\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.control.setValue(value); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgForm.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgForm.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    NgForm.prototype._findContainer = /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        path.pop();\n        return path.length ? /** @type {?} */ (this.form.get(path)) : this.form;\n    };\n    NgForm.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                    providers: [formDirectiveProvider],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    outputs: ['ngSubmit'],\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    NgForm.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgForm.propDecorators = {\n        \"options\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngFormOptions',] },],\n    };\n    return NgForm;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FormErrorExamples = {\n    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TemplateDrivenErrors = /** @class */ (function () {\n    function TemplateDrivenErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.formGroupNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.missingNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelGroupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    return TemplateDrivenErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return NgModelGroup; })\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * \\@stable\n */\nvar NgModelGroup = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgModelGroup, _super);\n    function NgModelGroup(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgModelGroup.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    };\n    NgModelGroup.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n    ];\n    /** @nocollapse */\n    NgModelGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"q\" /* Host */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"S\" /* SkipSelf */] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgModelGroup.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngModelGroup',] },],\n    };\n    return NgModelGroup;\n}(AbstractFormGroupDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return NgModel; })\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nvar resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * \\@howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgModel = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgModel, _super);\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        _this._registered = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"p\" /* EventEmitter */]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.formDirective && this.formDirective.removeControl(this); };\n    Object.defineProperty(NgModel.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgModel.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._isStandalone = /**\n     * @return {?}\n     */\n    function () {\n        return !this._parent || !!(this.options && this.options.standalone);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpStandalone = /**\n     * @return {?}\n     */\n    function () {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkForErrors = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgModel.prototype._updateValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype._updateDisabled = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(function () {\n            if (isDisabled && !_this.control.disabled) {\n                _this.control.disable();\n            }\n            else if (!isDisabled && _this.control.disabled) {\n                _this.control.enable();\n            }\n        });\n    };\n    NgModel.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: '[ngModel]:not([formControlName]):not([formControl])',\n                    providers: [formControlBinding],\n                    exportAs: 'ngModel'\n                },] },\n    ];\n    /** @nocollapse */\n    NgModel.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"q\" /* Host */] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    NgModel.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n        \"isDisabled\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['disabled',] },],\n        \"model\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngModel',] },],\n        \"options\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngModelOptions',] },],\n        \"update\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"I\" /* Output */], args: ['ngModelChange',] },],\n    };\n    return NgModel;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ReactiveErrors = /** @class */ (function () {\n    function ReactiveErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.controlParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.ngModelGroupException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.missingFormException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.groupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.arrayParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.disabledAttrWarning = /**\n     * @return {?}\n     */\n    function () {\n        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    };\n    return ReactiveErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return FormControlDirective; })\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  \\@stable\n */\nvar FormControlDirective = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormControlDirective, _super);\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"p\" /* EventEmitter */]();\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n                /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlDirective.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype._isControlChanged = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        return changes.hasOwnProperty('form');\n    };\n    FormControlDirective.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n    ];\n    /** @nocollapse */\n    FormControlDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlDirective.propDecorators = {\n        \"form\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['formControl',] },],\n        \"model\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngModel',] },],\n        \"update\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"I\" /* Output */], args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['disabled',] },],\n    };\n    return FormControlDirective;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return FormGroupDirective; })\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormGroupDirective = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormGroupDirective, _super);\n    function FormGroupDirective(_validators, _asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._validators = _validators;\n        _this._asyncValidators = _asyncValidators;\n        _this.submitted = false;\n        _this.directives = [];\n        _this.form = /** @type {?} */ ((null));\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"p\" /* EventEmitter */]();\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormGroupDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    };\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { removeDir(this.directives, dir); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var /** @type {?} */ ctrl = /** @type {?} */ (this.form.get(dir.path));\n        ctrl.setValue(value);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateDomValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.directives.forEach(function (dir) {\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                (/** @type {?} */ (dir)).control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateRegistrations = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(function () { });\n        this._oldForm = this.form;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateValidators = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._checkFormPresent = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    };\n    FormGroupDirective.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: '[formGroup]',\n                    providers: [formDirectiveProvider$1],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    FormGroupDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupDirective.propDecorators = {\n        \"form\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['formGroup',] },],\n        \"ngSubmit\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"I\" /* Output */] },],\n    };\n    return FormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return FormGroupName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormGroupName = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormGroupName, _super);\n    function FormGroupName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupName.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    };\n    FormGroupName.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormGroupName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"q\" /* Host */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"S\" /* SkipSelf */] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupName.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['formGroupName',] },],\n    };\n    return FormGroupName;\n}(AbstractFormGroupDirective));\nvar formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return FormArrayName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by calling\n * its {\\@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormArrayName = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormArrayName, _super);\n    function FormArrayName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormArray(this);\n    };\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    };\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormArray(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? /** @type {?} */ (this._parent.formDirective) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    };\n    FormArrayName.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormArrayName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"q\" /* Host */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"S\" /* SkipSelf */] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormArrayName.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['formArrayName',] },],\n    };\n    return FormArrayName;\n}(ControlContainer));\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar controlNameBinding = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return FormControlName; })\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n *\n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormControlName = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormControlName, _super);\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this._added = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"p\" /* EventEmitter */]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    };\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlName.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    Object.defineProperty(FormControlName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ ((composeAsyncValidators(this._rawAsyncValidators)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType();\n        (/** @type {?} */ (this)).control = this.formDirective.addControl(this);\n        if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n            /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    };\n    FormControlName.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n    ];\n    /** @nocollapse */\n    FormControlName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"q\" /* Host */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"S\" /* SkipSelf */] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"H\" /* Optional */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"R\" /* Self */] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"t\" /* Inject */], args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlName.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['formControlName',] },],\n        \"model\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['ngModel',] },],\n        \"update\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"I\" /* Output */], args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */], args: ['disabled',] },],\n    };\n    return FormControlName;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\nvar REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return RequiredValidator; }),\n    multi: true\n};\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return CheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@stable\n */\nvar RequiredValidator = /** @class */ (function () {\n    function RequiredValidator() {\n    }\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = value != null && value !== false && \"\" + value !== 'false';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    RequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.required(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RequiredValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    RequiredValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                    providers: [REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    RequiredValidator.ctorParameters = function () { return []; };\n    RequiredValidator.propDecorators = {\n        \"required\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return RequiredValidator;\n}());\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n */\nvar CheckboxRequiredValidator = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(CheckboxRequiredValidator, _super);\n    function CheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    CheckboxRequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.requiredTrue(c) : null;\n    };\n    CheckboxRequiredValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxRequiredValidator.ctorParameters = function () { return []; };\n    return CheckboxRequiredValidator;\n}(RequiredValidator));\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nvar EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return EmailValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n */\nvar EmailValidator = /** @class */ (function () {\n    function EmailValidator() {\n    }\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._enabled = value === '' || value === true || value === 'true';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    EmailValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this._enabled ? Validators.email(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EmailValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    EmailValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                    providers: [EMAIL_VALIDATOR]\n                },] },\n    ];\n    /** @nocollapse */\n    EmailValidator.ctorParameters = function () { return []; };\n    EmailValidator.propDecorators = {\n        \"email\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return EmailValidator;\n}());\n/**\n * \\@stable\n * @record\n */\n\n/**\n * \\@stable\n * @record\n */\n\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nvar MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return MinLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@stable\n */\nvar MinLengthValidator = /** @class */ (function () {\n    function MinLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MinLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MinLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.minlength == null ? null : this._validator(c);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MinLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MinLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    };\n    MinLengthValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                    providers: [MIN_LENGTH_VALIDATOR],\n                    host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MinLengthValidator.ctorParameters = function () { return []; };\n    MinLengthValidator.propDecorators = {\n        \"minlength\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return MinLengthValidator;\n}());\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nvar MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return MaxLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@stable\n */\nvar MaxLengthValidator = /** @class */ (function () {\n    function MaxLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.maxlength != null ? this._validator(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MaxLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    };\n    MaxLengthValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                    providers: [MAX_LENGTH_VALIDATOR],\n                    host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MaxLengthValidator.ctorParameters = function () { return []; };\n    MaxLengthValidator.propDecorators = {\n        \"maxlength\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return MaxLengthValidator;\n}());\nvar PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"_3\" /* forwardRef */])(function () { return PatternValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nvar PatternValidator = /** @class */ (function () {\n    function PatternValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PatternValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    PatternValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return this._validator(c); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    PatternValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    PatternValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () { this._validator = Validators.pattern(this.pattern); };\n    PatternValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                    providers: [PATTERN_VALIDATOR],\n                    host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    PatternValidator.ctorParameters = function () { return []; };\n    PatternValidator.propDecorators = {\n        \"pattern\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"x\" /* Input */] },],\n    };\n    return PatternValidator;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * \\@howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  * **NgModule**: {\\@link ReactiveFormsModule}\n *\n * \\@stable\n */\nvar FormBuilder = /** @class */ (function () {\n    function FormBuilder() {\n    }\n    /**\n     * Construct a new {@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {@link FormGroup} constructor for more details.\n     */\n    /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    FormBuilder.prototype.group = /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    function (controlsConfig, extra) {\n        if (extra === void 0) { extra = null; }\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;\n        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n    };\n    /**\n     * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     */\n    /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.control = /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (formState, validator, asyncValidator) {\n        return new FormControl(formState, validator, asyncValidator);\n    };\n    /**\n     * Construct a {@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     */\n    /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.array = /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (controlsConfig, validator, asyncValidator) {\n        var _this = this;\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n        return new FormArray(controls, validator, asyncValidator);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._reduceControls = /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    function (controlsConfig) {\n        var _this = this;\n        var /** @type {?} */ controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._createControl = /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    function (controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            var /** @type {?} */ value = controlConfig[0];\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    };\n    FormBuilder.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    FormBuilder.ctorParameters = function () { return []; };\n    return FormBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"X\" /* Version */]('6.0.0-beta.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@experimental\n */\nvar NgNoValidate = /** @class */ (function () {\n    function NgNoValidate() {\n    }\n    NgNoValidate.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"m\" /* Directive */], args: [{\n                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                    host: { 'novalidate': '' },\n                },] },\n    ];\n    /** @nocollapse */\n    NgNoValidate.ctorParameters = function () { return []; };\n    return NgNoValidate;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nvar InternalFormsSharedModule = /** @class */ (function () {\n    function InternalFormsSharedModule() {\n    }\n    InternalFormsSharedModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"B\" /* NgModule */], args: [{\n                    declarations: SHARED_FORM_DIRECTIVES,\n                    exports: SHARED_FORM_DIRECTIVES,\n                },] },\n    ];\n    /** @nocollapse */\n    InternalFormsSharedModule.ctorParameters = function () { return []; };\n    return InternalFormsSharedModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The ng module for forms.\n * \\@stable\n */\nvar FormsModule = /** @class */ (function () {\n    function FormsModule() {\n    }\n    FormsModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"B\" /* NgModule */], args: [{\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                    providers: [RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    FormsModule.ctorParameters = function () { return []; };\n    return FormsModule;\n}());\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nvar ReactiveFormsModule = /** @class */ (function () {\n    function ReactiveFormsModule() {\n    }\n    ReactiveFormsModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"B\" /* NgModule */], args: [{\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                    providers: [FormBuilder, RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    ReactiveFormsModule.ctorParameters = function () { return []; };\n    return ReactiveFormsModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=forms.js.map\n\n\n/***/ }),\n\n/***/ 93:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(1);\nvar map_1 = __webpack_require__(35);\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n/***/ }),\n\n/***/ 94:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar ForkJoinObservable_1 = __webpack_require__(95);\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map\n\n/***/ }),\n\n/***/ 95:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = __webpack_require__(1);\nvar EmptyObservable_1 = __webpack_require__(8);\nvar isArray_1 = __webpack_require__(18);\nvar subscribeToResult_1 = __webpack_require__(19);\nvar OuterSubscriber_1 = __webpack_require__(20);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map\n\n/***/ }),\n\n/***/ 96:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return BrowserXhr; });\n/* unused harmony export JSONPBackend */\n/* unused harmony export JSONPConnection */\n/* unused harmony export CookieXSRFStrategy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return XHRBackend; });\n/* unused harmony export XHRConnection */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseRequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return RequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BaseResponseOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return ResponseOptions; });\n/* unused harmony export ReadyState */\n/* unused harmony export RequestMethod */\n/* unused harmony export ResponseContentType */\n/* unused harmony export ResponseType */\n/* unused harmony export Headers */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return Http; });\n/* unused harmony export Jsonp */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return HttpModule; });\n/* unused harmony export JsonpModule */\n/* unused harmony export Connection */\n/* unused harmony export ConnectionBackend */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return XSRFStrategy; });\n/* unused harmony export Request */\n/* unused harmony export Response */\n/* unused harmony export QueryEncoder */\n/* unused harmony export URLSearchParams */\n/* unused harmony export VERSION */\n/* unused harmony export ɵe */\n/* unused harmony export ɵf */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return _createDefaultCookieXSRFStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return httpFactory; });\n/* unused harmony export ɵc */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tslib__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(9);\n/**\n * @license Angular v6.0.0-beta.0\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n/** @enum {number} */\nvar ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n/** @enum {number} */\nvar ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n/** @enum {number} */\nvar ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n/** @enum {number} */\nvar ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Headers = /** @class */ (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var /** @type {?} */ values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name_1 = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    Headers.prototype.toJSON = /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[/** @type {?} */ ((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar ResponseOptions = /** @class */ (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseResponseOptions = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */])(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar ConnectionBackend = /** @class */ (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar Connection = /** @class */ (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar XSRFStrategy = /** @class */ (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * Required structure when constructing new Request();\n * @record\n */\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n *\n */\nvar QueryEncoder = /** @class */ (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar URLSearchParams = /** @class */ (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = /** @class */ (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return /** @type {?} */ (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof Blob) {\n            return /** @type {?} */ (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Response = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */])(Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = /** @type {?} */ ((responseOptions.status));\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = /** @type {?} */ ((responseOptions.type));\n        _this.url = /** @type {?} */ ((responseOptions.url));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = /** @class */ (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = /**\n     * @return {?}\n     */\n    function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPConnection = /** @class */ (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var /** @type {?} */ id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var /** @type {?} */ callback = _dom.requestCallback(_this._id);\n            var /** @type {?} */ url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var /** @type {?} */ script = _this._script = _dom.build(url);\n            var /** @type {?} */ onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var /** @type {?} */ responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var /** @type {?} */ onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPBackend = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */])(JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRConnection = /** @class */ (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            var /** @type {?} */ _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var /** @type {?} */ onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var /** @type {?} */ status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var /** @type {?} */ body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var /** @type {?} */ headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n                var /** @type {?} */ statusText = _xhr.statusText || 'OK';\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var /** @type {?} */ response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var /** @type {?} */ onError = function (err) {\n                var /** @type {?} */ responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar CookieXSRFStrategy = /** @class */ (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var /** @type {?} */ xsrfToken = Object(__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__[\"r\" /* ɵgetDOM */])().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRBackend = /** @class */ (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar RequestOptions = /** @class */ (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = /**\n     * @param {?=} params\n     * @return {?}\n     */\n    function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseRequestOptions = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */])(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Request = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */])(Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var /** @type {?} */ url = requestOptions.url;\n        _this.url = /** @type {?} */ ((requestOptions.url));\n        var /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var /** @type {?} */ params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var /** @type {?} */ prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = /** @type {?} */ ((requestOptions.withCredentials));\n        _this.responseType = /** @type {?} */ ((requestOptions.responseType));\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return /** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return /** @type {?} */ (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Http = /** @class */ (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar Jsonp = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */])(Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar HttpModule = /** @class */ (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"B\" /* NgModule */], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JsonpModule = /** @class */ (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"B\" /* NgModule */], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"X\" /* Version */]('6.0.0-beta.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=http.js.map\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 3.dist/bundle-webpack-lazy-loading.js","import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./store\";\nimport * as i4 from \"./log-tail-service\";\nimport * as i5 from \"@angular/http\";\nimport * as i6 from \"./log-demo\";\nvar styles_LogDemo = [];\nvar RenderType_LogDemo = i0.ɵcrt({ encapsulation: 2, styles: styles_LogDemo, data: {} });\nexport { RenderType_LogDemo as RenderType_LogDemo };\nfunction View_LogDemo_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 4, \"tr\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵted(2, null, [\"\", \"\"])), (_l()(), i0.ɵeld(3, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵted(4, null, [\"\", \"\"]))], null, function (_ck, _v) { var currVal_0 = _v.context.$implicit.text; _ck(_v, 2, 0, currVal_0); var currVal_1 = _v.context.$implicit.severity; _ck(_v, 4, 0, currVal_1); }); }\nexport function View_LogDemo_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 32, \"div\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 1, \"h1\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Error log state managed using Redux\"])), (_l()(), i0.ɵeld(3, 0, null, null, 1, \"button\", [[\"style\", \"margin-bottom: 10px;\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.generateLogEntry() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵted(-1, null, [\"Add new log entry\"])), (_l()(), i0.ɵeld(5, 0, null, null, 5, \"input\", [[\"placeholder\", \"message\"], [\"type\", \"text\"]], [[2, \"ng-untouched\", null], [2, \"ng-touched\", null], [2, \"ng-pristine\", null], [2, \"ng-dirty\", null], [2, \"ng-valid\", null], [2, \"ng-invalid\", null], [2, \"ng-pending\", null]], [[null, \"ngModelChange\"], [null, \"input\"], [null, \"blur\"], [null, \"compositionstart\"], [null, \"compositionend\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"input\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 6)._handleInput($event.target.value) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 6).onTouched() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"compositionstart\" === en)) {\n        var pd_2 = (i0.ɵnov(_v, 6)._compositionStart() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"compositionend\" === en)) {\n        var pd_3 = (i0.ɵnov(_v, 6)._compositionEnd($event.target.value) !== false);\n        ad = (pd_3 && ad);\n    } if ((\"ngModelChange\" === en)) {\n        var pd_4 = ((_co.msg = $event) !== false);\n        ad = (pd_4 && ad);\n    } return ad; }, null, null)), i0.ɵdid(6, 16384, null, 0, i1.DefaultValueAccessor, [i0.Renderer2, i0.ElementRef, [2, i1.COMPOSITION_BUFFER_MODE]], null, null), i0.ɵprd(1024, null, i1.NG_VALUE_ACCESSOR, function (p0_0) { return [p0_0]; }, [i1.DefaultValueAccessor]), i0.ɵdid(8, 671744, null, 0, i1.NgModel, [[8, null], [8, null], [8, null], [2, i1.NG_VALUE_ACCESSOR]], { model: [0, \"model\"] }, { update: \"ngModelChange\" }), i0.ɵprd(2048, null, i1.NgControl, null, [i1.NgModel]), i0.ɵdid(10, 16384, null, 0, i1.NgControlStatus, [i1.NgControl], null, null), (_l()(), i0.ɵeld(11, 0, null, null, 6, \"input\", [[\"placeholder\", \"severity\"], [\"type\", \"number\"]], [[2, \"ng-untouched\", null], [2, \"ng-touched\", null], [2, \"ng-pristine\", null], [2, \"ng-dirty\", null], [2, \"ng-valid\", null], [2, \"ng-invalid\", null], [2, \"ng-pending\", null]], [[null, \"ngModelChange\"], [null, \"input\"], [null, \"blur\"], [null, \"compositionstart\"], [null, \"compositionend\"], [null, \"change\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"input\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 12)._handleInput($event.target.value) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 12).onTouched() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"compositionstart\" === en)) {\n        var pd_2 = (i0.ɵnov(_v, 12)._compositionStart() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"compositionend\" === en)) {\n        var pd_3 = (i0.ɵnov(_v, 12)._compositionEnd($event.target.value) !== false);\n        ad = (pd_3 && ad);\n    } if ((\"change\" === en)) {\n        var pd_4 = (i0.ɵnov(_v, 13).onChange($event.target.value) !== false);\n        ad = (pd_4 && ad);\n    } if ((\"input\" === en)) {\n        var pd_5 = (i0.ɵnov(_v, 13).onChange($event.target.value) !== false);\n        ad = (pd_5 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_6 = (i0.ɵnov(_v, 13).onTouched() !== false);\n        ad = (pd_6 && ad);\n    } if ((\"ngModelChange\" === en)) {\n        var pd_7 = ((_co.severity = $event) !== false);\n        ad = (pd_7 && ad);\n    } return ad; }, null, null)), i0.ɵdid(12, 16384, null, 0, i1.DefaultValueAccessor, [i0.Renderer2, i0.ElementRef, [2, i1.COMPOSITION_BUFFER_MODE]], null, null), i0.ɵdid(13, 16384, null, 0, i1.ɵbc, [i0.Renderer2, i0.ElementRef], null, null), i0.ɵprd(1024, null, i1.NG_VALUE_ACCESSOR, function (p0_0, p1_0) { return [p0_0, p1_0]; }, [i1.DefaultValueAccessor, i1.ɵbc]), i0.ɵdid(15, 671744, null, 0, i1.NgModel, [[8, null], [8, null], [8, null], [2, i1.NG_VALUE_ACCESSOR]], { model: [0, \"model\"] }, { update: \"ngModelChange\" }), i0.ɵprd(2048, null, i1.NgControl, null, [i1.NgModel]), i0.ɵdid(17, 16384, null, 0, i1.NgControlStatus, [i1.NgControl], null, null), (_l()(), i0.ɵeld(18, 0, null, null, 11, \"table\", [[\"class\", \"table\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(19, 0, null, null, 10, \"tbody\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(20, 0, null, null, 6, \"tr\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(21, 0, null, null, 2, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(22, 0, null, null, 1, \"strong\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Message\"])), (_l()(), i0.ɵeld(24, 0, null, null, 2, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(25, 0, null, null, 1, \"strong\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Severity\"])), (_l()(), i0.ɵand(16777216, null, null, 2, null, View_LogDemo_1)), i0.ɵdid(28, 802816, null, 0, i2.NgForOf, [i0.ViewContainerRef, i0.TemplateRef, i0.IterableDiffers], { ngForOf: [0, \"ngForOf\"] }, null), i0.ɵpid(131072, i2.AsyncPipe, [i0.ChangeDetectorRef]), (_l()(), i0.ɵeld(30, 0, null, null, 2, \"h4\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(31, 0, null, null, 1, \"a\", [[\"href\", \"http://www.syntaxsuccess.com/viewarticle/redux-in-angular-2.0\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Read more here\"]))], function (_ck, _v) { var _co = _v.component; var currVal_7 = _co.msg; _ck(_v, 8, 0, currVal_7); var currVal_15 = _co.severity; _ck(_v, 15, 0, currVal_15); var currVal_16 = i0.ɵunv(_v, 28, 0, i0.ɵnov(_v, 29).transform(_co.store.logEntries)); _ck(_v, 28, 0, currVal_16); }, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 10).ngClassUntouched; var currVal_1 = i0.ɵnov(_v, 10).ngClassTouched; var currVal_2 = i0.ɵnov(_v, 10).ngClassPristine; var currVal_3 = i0.ɵnov(_v, 10).ngClassDirty; var currVal_4 = i0.ɵnov(_v, 10).ngClassValid; var currVal_5 = i0.ɵnov(_v, 10).ngClassInvalid; var currVal_6 = i0.ɵnov(_v, 10).ngClassPending; _ck(_v, 5, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6); var currVal_8 = i0.ɵnov(_v, 17).ngClassUntouched; var currVal_9 = i0.ɵnov(_v, 17).ngClassTouched; var currVal_10 = i0.ɵnov(_v, 17).ngClassPristine; var currVal_11 = i0.ɵnov(_v, 17).ngClassDirty; var currVal_12 = i0.ɵnov(_v, 17).ngClassValid; var currVal_13 = i0.ɵnov(_v, 17).ngClassInvalid; var currVal_14 = i0.ɵnov(_v, 17).ngClassPending; _ck(_v, 11, 0, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14); }); }\nexport function View_LogDemo_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"ng-component\", [], null, null, null, View_LogDemo_0, RenderType_LogDemo)), i0.ɵprd(512, null, i3.Store, i3.Store, []), i0.ɵprd(512, null, i4.LogTailService, i4.LogTailService, [i5.Http]), i0.ɵdid(3, 114688, null, 0, i6.LogDemo, [i3.Store, i4.LogTailService], null, null)], function (_ck, _v) { _ck(_v, 3, 0); }, null); }\nvar LogDemoNgFactory = i0.ɵccf(\"ng-component\", i6.LogDemo, View_LogDemo_Host_0, {}, {}, []);\nexport { LogDemoNgFactory as LogDemoNgFactory };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/log-tail/log-demo.ngfactory.js\n// module id = null\n// module chunks = ","import 'rxjs/add/operator/map';\nvar ReduxModule = (function () {\n    function ReduxModule() {\n    }\n    return ReduxModule;\n}());\nexport { ReduxModule };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app-lazy/lazy-modules/redux.module.ts\n// module id = null\n// module chunks = ","export var logReducer = function (state, action) {\n    if (state === void 0) { state = []; }\n    switch (action.type) {\n        case 'ADD_ENTRY':\n            return state.concat([action.data]);\n        case 'LOAD_ENTRIES':\n            return action.data;\n        default:\n            return state;\n    }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/log-tail/log-reducer.ts\n// module id = null\n// module chunks = ","import { Subject } from 'rxjs/Subject';\nimport { logReducer } from './log-reducer';\nvar Store = (function () {\n    function Store() {\n        var _this = this;\n        this.dispatcher = new Subject();\n        this.log = new Subject();\n        this.logItems = [];\n        this.dispatcher.subscribe(function (action) { return _this.handleAction(action); });\n        this.logEntries = this.log.asObservable();\n    }\n    Store.prototype.handleAction = function (action) {\n        this.logItems = logReducer(this.logItems, action);\n        this.log.next(this.logItems);\n    };\n    Store.prototype.dispatchAction = function (action) {\n        this.dispatcher.next(action);\n    };\n    return Store;\n}());\nexport { Store };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/log-tail/store.ts\n// module id = null\n// module chunks = ","import { Http } from '@angular/http';\nvar LogTailService = (function () {\n    function LogTailService(http) {\n        this.http = http;\n    }\n    LogTailService.prototype.getLogEntries = function () {\n        return this.http.get('./components/log-tail/log.json').map(function (res) { return res.json(); });\n    };\n    return LogTailService;\n}());\nexport { LogTailService };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/log-tail/log-tail-service.ts\n// module id = null\n// module chunks = ","var LogAction = (function () {\n    function LogAction(type, data) {\n        this.type = type;\n        this.data = data;\n    }\n    return LogAction;\n}());\nexport { LogAction };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/log-tail/log-action.ts\n// module id = null\n// module chunks = ","var LogEntry = (function () {\n    function LogEntry(text, severity) {\n        this.text = text;\n        this.severity = severity;\n    }\n    return LogEntry;\n}());\nexport { LogEntry };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/log-tail/log-entry.ts\n// module id = null\n// module chunks = ","import { Store } from './store';\nimport { LogAction } from './log-action';\nimport { LogEntry } from './log-entry';\nimport { LogTailService } from './log-tail-service';\nvar LogDemo = (function () {\n    function LogDemo(store, logTailService) {\n        this.store = store;\n        this.logTailService = logTailService;\n    }\n    LogDemo.prototype.generateLogEntry = function () {\n        var entry = new LogEntry(this.msg, this.severity);\n        this.store.dispatchAction(new LogAction('ADD_ENTRY', entry));\n        this.msg = '';\n        this.severity = undefined;\n    };\n    LogDemo.prototype.ngOnInit = function () {\n        var _this = this;\n        this.logTailService.getLogEntries().subscribe(function (res) { return _this.store.dispatchAction(new LogAction('LOAD_ENTRIES', res.entries)); });\n    };\n    return LogDemo;\n}());\nexport { LogDemo };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/log-tail/log-demo.ts\n// module id = null\n// module chunks = ","import * as i0 from \"@angular/core\";\nimport * as i1 from \"./redux.module\";\nimport * as i2 from \"../../components/log-tail/log-demo.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/http\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"../../components/log-tail/log-demo\";\nvar ReduxModuleNgFactory = i0.ɵcmf(i1.ReduxModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.LogDemoNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵa]]), i0.ɵmpd(4608, i4.ɵi, i4.ɵi, []), i0.ɵmpd(4608, i5.BrowserXhr, i5.BrowserXhr, []), i0.ɵmpd(4608, i5.ResponseOptions, i5.BaseResponseOptions, []), i0.ɵmpd(5120, i5.XSRFStrategy, i5.ɵa, []), i0.ɵmpd(4608, i5.XHRBackend, i5.XHRBackend, [i5.BrowserXhr, i5.ResponseOptions, i5.XSRFStrategy]), i0.ɵmpd(4608, i5.RequestOptions, i5.BaseRequestOptions, []), i0.ɵmpd(5120, i5.Http, i5.ɵb, [i5.XHRBackend, i5.RequestOptions]), i0.ɵmpd(512, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(512, i4.ɵba, i4.ɵba, []), i0.ɵmpd(512, i4.FormsModule, i4.FormsModule, []), i0.ɵmpd(512, i5.HttpModule, i5.HttpModule, []), i0.ɵmpd(512, i6.RouterModule, i6.RouterModule, [[2, i6.ɵa], [2, i6.Router]]), i0.ɵmpd(512, i1.ReduxModule, i1.ReduxModule, []), i0.ɵmpd(1024, i6.ROUTES, function () { return [[{ path: \"\", component: i7.LogDemo }]]; }, [])]); });\nexport { ReduxModuleNgFactory as ReduxModuleNgFactory };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app-lazy/lazy-modules/redux.module.ngfactory.js\n// module id = null\n// module chunks = ","/**\n * @license Angular v6.0.0-beta.0\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { __assign, __extends } from 'tslib';\nimport { Directive, ElementRef, EventEmitter, Host, Inject, Injectable, InjectionToken, Injector, Input, NgModule, Optional, Output, Renderer2, Self, SkipSelf, Version, forwardRef, ɵisObservable, ɵisPromise, ɵlooseIdentical } from '@angular/core';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { map } from 'rxjs/operator/map';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControlDirective = /** @class */ (function () {\n    function AbstractControlDirective() {\n    }\n    Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n        /** The value of the control. */\n        get: /**\n         * The value of the control.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.value : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.valid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.invalid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pending : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.disabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.enabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n        /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         */\n        get: /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.errors : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pristine : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.dirty : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.touched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"status\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.control ? this.control.status : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.untouched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n        /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         */\n        get: /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.statusChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n        /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         */\n        get: /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.valueChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n        /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         */\n        get: /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {@link AbstractControl}.\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        if (this.control)\n            this.control.reset(value);\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    };\n    return AbstractControlDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A directive that contains multiple {\\@link NgControl}s.\n *\n * Only used by the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar ControlContainer = /** @class */ (function (_super) {\n    __extends(ControlContainer, _super);\n    function ControlContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n        /**\n         * Get the form to which this container belongs.\n         */\n        get: /**\n         * Get the form to which this container belongs.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ControlContainer.prototype, \"path\", {\n        /**\n         * Get the path to this container.\n         */\n        get: /**\n         * Get the path to this container.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return ControlContainer;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {\\@link NG_VALIDATORS} for more details.\n *\n * \\@stable\n */\nvar NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n *\n * \\@stable\n */\nvar Validators = /** @class */ (function () {\n    function Validators() {\n    }\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     *`min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     */\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    Validators.min = /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    function (min) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     */\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    Validators.max = /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    function (max) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a non-empty value.\n     */\n    /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.required = /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    };\n    /**\n     * Validator that requires control value to be true.\n     */\n    /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.requiredTrue = /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return control.value === true ? null : { 'required': true };\n    };\n    /**\n     * Validator that performs email validation.\n     */\n    /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.email = /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    };\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    Validators.minLength = /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    function (minLength) {\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    Validators.maxLength = /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    function (maxLength) {\n        return function (control) {\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires a control to match a regex to its value.\n     */\n    /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    Validators.pattern = /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    function (pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        var /** @type {?} */ regex;\n        var /** @type {?} */ regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    };\n    /**\n     * No-op validator.\n     */\n    /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    Validators.nullValidator = /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return null; };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.compose = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.composeAsync = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return map.call(forkJoin(observables), _mergeErrors);\n        };\n    };\n    return Validators;\n}());\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    var /** @type {?} */ obs = ɵisPromise(r) ? fromPromise(r) : r;\n    if (!(ɵisObservable(obs))) {\n        throw new Error(\"Expected validator to return Promise or Observable.\");\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n        return errors != null ? __assign({}, /** @type {?} */ ((res)), errors) : /** @type {?} */ ((res));\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `ControlValueAccessor` acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface if you want to create a custom form control directive\n * that integrates with Angular forms.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n *\n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nvar NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CheckboxControlValueAccessor; }),\n    multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar CheckboxControlValueAccessor = /** @class */ (function () {\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    CheckboxControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                    providers: [CHECKBOX_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    return CheckboxControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return DefaultValueAccessor; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    var /** @type {?} */ userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n */\nvar COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar DefaultValueAccessor = /** @class */ (function () {\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._handleInput = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionStart = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { this._composing = true; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionEnd = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    };\n    DefaultValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                    // TODO: vsavkin replace the above selector with the one below it once\n                    // https://github.com/angular/angular/issues/3011 is implemented\n                    // selector: '[ngModel],[formControl],[formControlName]',\n                    host: {\n                        '(input)': '$any(this)._handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '$any(this)._compositionStart()',\n                        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                    },\n                    providers: [DEFAULT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    DefaultValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },\n    ]; };\n    return DefaultValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NumberValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nvar NumberValueAccessor = /** @class */ (function () {\n    function NumberValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    NumberValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [NUMBER_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    NumberValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    return NumberValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n *\n * Used internally by Angular forms.\n *\n * \\@stable\n * @abstract\n */\nvar NgControl = /** @class */ (function (_super) {\n    __extends(NgControl, _super);\n    function NgControl() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * \\@internal\n         */\n        _this._parent = null;\n        _this.name = null;\n        _this.valueAccessor = null;\n        /**\n         * \\@internal\n         */\n        _this._rawValidators = [];\n        /**\n         * \\@internal\n         */\n        _this._rawAsyncValidators = [];\n        return _this;\n    }\n    Object.defineProperty(NgControl.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    return NgControl;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return RadioControlValueAccessor; }),\n    multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nvar RadioControlRegistry = /** @class */ (function () {\n    function RadioControlRegistry() {\n        this._accessors = [];\n    }\n    /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.add = /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (control, accessor) {\n        this._accessors.push([control, accessor]);\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.remove = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.select = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        var _this = this;\n        this._accessors.forEach(function (c) {\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    };\n    /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype._isSameGroup = /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    };\n    RadioControlRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    RadioControlRegistry.ctorParameters = function () { return []; };\n    return RadioControlRegistry;\n}());\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  \\@stable\n */\nvar RadioControlValueAccessor = /** @class */ (function () {\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this._registry.remove(this); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._fn = fn;\n        this.onChange = function () {\n            fn(_this.value);\n            _this._registry.select(_this);\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.fireUncheck = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.writeValue(value); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._throwNameError = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n    };\n    RadioControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [RADIO_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RadioControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n        { type: RadioControlRegistry, },\n        { type: Injector, },\n    ]; };\n    RadioControlValueAccessor.propDecorators = {\n        \"name\": [{ type: Input },],\n        \"formControlName\": [{ type: Input },],\n        \"value\": [{ type: Input },],\n    };\n    return RadioControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return RangeValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nvar RangeValueAccessor = /** @class */ (function () {\n    function RangeValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    RangeValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [RANGE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RangeValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    return RangeValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return SelectControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar SelectControlValueAccessor = /** @class */ (function () {\n    function SelectControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    Object.defineProperty(SelectControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        var /** @type {?} */ id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        var /** @type {?} */ valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (valueString) {\n            _this.value = _this._getOptionValue(valueString);\n            fn(_this.value);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return (this._idCounter++).toString(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    };\n    SelectControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    SelectControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: Input },],\n    };\n    return SelectControlValueAccessor;\n}());\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * \\@howToUse\n *\n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n *\n * \\@stable\n */\nvar NgSelectOption = /** @class */ (function () {\n    function NgSelectOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._select._optionMap.set(this.id, value);\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._setElementValue(value);\n            if (this._select)\n                this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectOption.decorators = [\n        { type: Directive, args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectOption.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Renderer2, },\n        { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n    ]; };\n    NgSelectOption.propDecorators = {\n        \"ngValue\": [{ type: Input, args: ['ngValue',] },],\n        \"value\": [{ type: Input, args: ['value',] },],\n    };\n    return NgSelectOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (typeof value === 'string')\n        value = \"'\" + value + \"'\";\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n *  ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * \\@stable\n */\nvar SelectMultipleControlValueAccessor = /** @class */ (function () {\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        this.value = value;\n        var /** @type {?} */ optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (_) {\n            var /** @type {?} */ selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                var /** @type {?} */ options = _.selectedOptions;\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            else {\n                var /** @type {?} */ options = /** @type {?} */ (_.options);\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    if (opt.selected) {\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            _this.value = selected;\n            fn(selected);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? /** @type {?} */ ((this._optionMap.get(id)))._value : valueString;\n    };\n    SelectMultipleControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    SelectMultipleControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: Input },],\n    };\n    return SelectMultipleControlValueAccessor;\n}());\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nvar NgSelectMultipleOption = /** @class */ (function () {\n    function NgSelectMultipleOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select) {\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            }\n            else {\n                this._setElementValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setSelected = /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    function (selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectMultipleOption.decorators = [\n        { type: Directive, args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectMultipleOption.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Renderer2, },\n        { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n    ]; };\n    NgSelectMultipleOption.propDecorators = {\n        \"ngValue\": [{ type: Input, args: ['ngValue',] },],\n        \"value\": [{ type: Input, args: ['value',] },],\n    };\n    return NgSelectMultipleOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return /** @type {?} */ ((parent.path)).concat([name]);\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */\n    ((dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if (/** @type {?} */ ((dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange(function (isDisabled) { /** @type {?} */ ((/** @type {?} */ ((dir.valueAccessor)).setDisabledState))(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function () { return _noControlError(dir); }); /** @type {?} */\n    ((dir.valueAccessor)).registerOnTouched(function () { return _noControlError(dir); });\n    dir._rawValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function (newValue) {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnTouched(function () {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    dir.viewToModelUpdate(control._pendingValue);\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange(function (newValue, emitModelEvent) {\n        /** @type {?} */ ((\n        // control -> view\n        dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    var /** @type {?} */ messageEnd;\n    if (/** @type {?} */ ((dir.path)).length > 1) {\n        messageEnd = \"path: '\" + (/** @type {?} */ ((dir.path))).join(' -> ') + \"'\";\n    }\n    else if (/** @type {?} */ ((dir.path))[0]) {\n        messageEnd = \"name: '\" + dir.path + \"'\";\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(message + \" \" + messageEnd);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    var /** @type {?} */ change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !ɵlooseIdentical(viewModel, change.currentValue);\n}\nvar BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(function (dir) {\n        var /** @type {?} */ control = /** @type {?} */ (dir.control);\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    var /** @type {?} */ defaultAccessor = undefined;\n    var /** @type {?} */ builtinAccessor = undefined;\n    var /** @type {?} */ customAccessor = undefined;\n    valueAccessors.forEach(function (v) {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n *\n * \\@stable\n */\nvar AbstractFormGroupDirective = /** @class */ (function (_super) {\n    __extends(AbstractFormGroupDirective, _super);\n    function AbstractFormGroupDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    };\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n        /**\n         * Get the {@link FormGroup} backing this binding.\n         */\n        get: /**\n         * Get the {\\@link FormGroup} backing this binding.\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormGroup(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n        /**\n         * Get the path to this control group.\n         */\n        get: /**\n         * Get the path to this control group.\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * Get the {@link Form} to which this group belongs.\n         */\n        get: /**\n         * Get the {\\@link Form} to which this group belongs.\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    return AbstractFormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AbstractControlStatus = /** @class */ (function () {\n    function AbstractControlStatus(cd) {\n        this._cd = cd;\n    }\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.untouched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.touched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pristine : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.dirty : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.valid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.invalid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pending : false; },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractControlStatus;\n}());\nvar ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@stable\n */\nvar NgControlStatus = /** @class */ (function (_super) {\n    __extends(NgControlStatus, _super);\n    function NgControlStatus(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatus.decorators = [\n        { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n    ];\n    /** @nocollapse */\n    NgControlStatus.ctorParameters = function () { return [\n        { type: NgControl, decorators: [{ type: Self },] },\n    ]; };\n    return NgControlStatus;\n}(AbstractControlStatus));\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatusGroup = /** @class */ (function (_super) {\n    __extends(NgControlStatusGroup, _super);\n    function NgControlStatusGroup(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatusGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                    host: ngControlStatusHost\n                },] },\n    ];\n    /** @nocollapse */\n    NgControlStatusGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Self },] },\n    ]; };\n    return NgControlStatusGroup;\n}(AbstractControlStatus));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = (/** @type {?} */ (path)).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return (/** @type {?} */ (path)).reduce(function (v, name) {\n        if (v instanceof FormGroup) {\n            return v.controls[name] || null;\n        }\n        if (v instanceof FormArray) {\n            return v.at(/** @type {?} */ (name)) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    var /** @type {?} */ validator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).validators :\n        validatorOrOpts));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    var /** @type {?} */ origAsyncValidator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).asyncValidators :\n        asyncValidator));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * @record\n */\n\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControl = /** @class */ (function () {\n    function AbstractControl(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = function () { };\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\n        /**\n         * The parent control.\n         */\n        get: /**\n         * The parent control.\n         * @return {?}\n         */\n        function () { return this._parent; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.status === VALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.status === INVALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.status == PENDING; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.status === DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.status !== DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return !this.pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return !this.touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"updateOn\", {\n        /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         */\n        get: /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         * @return {?}\n         */\n        function () {\n            return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     */\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setValidators = /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    };\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     */\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setAsyncValidators = /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    };\n    /**\n     * Empties out the sync validator list.\n     */\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearValidators = /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    function () { this.validator = null; };\n    /**\n     * Empties out the async validator list.\n     */\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearAsyncValidators = /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    function () { this.asyncValidator = null; };\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsTouched = /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsUntouched = /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsDirty = /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    };\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPristine = /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /**\n     * Marks the control as `pending`.\n     */\n    /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPending = /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = PENDING;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    };\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     */\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.disable = /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = DISABLED;\n        (/** @type {?} */ (this)).errors = null;\n        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n    };\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     */\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.enable = /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = VALID;\n        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n    };\n    /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    AbstractControl.prototype._updateAncestors = /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    function (onlySelf) {\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity();\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControl.prototype.setParent = /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function (parent) { this._parent = parent; };\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     */\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.updateValueAndValidity = /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            (/** @type {?} */ (this)).errors = this._runValidator();\n            (/** @type {?} */ (this)).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTreeValidity = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = { emitEvent: true }; }\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._setInitialStatus = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).status = this._allControlsDisabled() ? DISABLED : VALID;\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._runValidator = /**\n     * @return {?}\n     */\n    function () {\n        return this.validator ? this.validator(this) : null;\n    };\n    /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._runAsyncValidator = /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        var _this = this;\n        if (this.asyncValidator) {\n            (/** @type {?} */ (this)).status = PENDING;\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._cancelExistingSubscription = /**\n     * @return {?}\n     */\n    function () {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.setErrors = /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (errors, opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    };\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     */\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControl.prototype.get = /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) { return _find(this, path, '.'); };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        var /** @type {?} */ control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) { return !!this.getError(errorCode, path); };\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\n        /**\n         * Retrieves the top-level ancestor of this control.\n         */\n        get: /**\n         * Retrieves the top-level ancestor of this control.\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ x = this;\n            while (x._parent) {\n                x = x._parent;\n            }\n            return x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._updateControlsErrors = /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        (/** @type {?} */ (this)).status = this._calculateStatus();\n        if (emitEvent) {\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._initObservables = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).valueChanges = new EventEmitter();\n        (/** @type {?} */ (this)).statusChanges = new EventEmitter();\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._calculateStatus = /**\n     * @return {?}\n     */\n    function () {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsHaveStatus = /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    function (status) {\n        return this._anyControls(function (control) { return control.status === status; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsDirty = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.dirty; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsTouched = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.touched; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updatePristine = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTouched = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    AbstractControl.prototype._isBoxedValue = /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractControl.prototype._registerOnCollectionChange = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onCollectionChange = fn; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._setUpdateStrategy = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (isOptionsObj(opts) && (/** @type {?} */ (opts)).updateOn != null) {\n            this._updateOn = /** @type {?} */ (((/** @type {?} */ (opts)).updateOn));\n        }\n    };\n    return AbstractControl;\n}());\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * The second {\\@link FormControl} argument can accept one of three things:\n * * a sync validator function\n * * an array of sync validator functions\n * * an options object containing validator and/or async validator functions\n *\n * Example of a single sync validator function:\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * Example using options object:\n *\n * ```ts\n * const ctrl = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * The options object can also be used to define when the control should update.\n * By default, the value and validity of a control updates whenever the value\n * changes. You can configure it to update on the blur event instead by setting\n * the `updateOn` option to `'blur'`.\n *\n * ```ts\n * const c = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * You can also set `updateOn` to `'submit'`, which will delay value and validity\n * updates until the parent form of the control fires a submit event.\n *\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormControl = /** @class */ (function (_super) {\n    __extends(FormControl, _super);\n    function FormControl(formState, validatorOrOpts, asyncValidator) {\n        if (formState === void 0) { formState = null; }\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        /**\n         * \\@internal\n         */\n        _this._onChange = [];\n        _this._applyFormState(formState);\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        _this._initObservables();\n        return _this;\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     */\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.setValue = /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        (/** @type {?} */ (this)).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach(function (changeFn) { return changeFn(_this.value, options.emitViewToModelChange !== false); });\n        }\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     */\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.patchValue = /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (options === void 0) { options = {}; }\n        this.setValue(value, options);\n    };\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    function (formState, options) {\n        if (formState === void 0) { formState = null; }\n        if (options === void 0) { options = {}; }\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormControl.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) { return false; };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return this.disabled; };\n    /**\n     * Register a listener for change events.\n     */\n    /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnChange = /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange.push(fn); };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._clearChangeFns = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = function () { };\n    };\n    /**\n     * Register a listener for disabled events.\n     */\n    /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnDisabledChange = /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onDisabledChange.push(fn);\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormControl.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) { };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n    FormControl.prototype._applyFormState = /**\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        if (this._isBoxedValue(formState)) {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState;\n        }\n    };\n    return FormControl;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like {\\@link FormControl} instances, you can alternatively choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, {validators: passwordMatchValidator, asyncValidators: otherValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *    one: new FormControl()\n * }, {updateOn: 'blur'});\n * ```\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormGroup = /** @class */ (function (_super) {\n    __extends(FormGroup, _super);\n    function FormGroup(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {@link FormGroup#addControl addControl} instead.\n     */\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.registerControl = /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    };\n    /**\n     * Add a control to this group.\n     */\n    /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.addControl = /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove a control from this group.\n     */\n    /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype.removeControl = /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {@link AbstractControl#get get} instead.\n     */\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    FormGroup.prototype.contains = /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    function (controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    };\n    /**\n     *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(function (name) {\n            _this._throwIfControlMissing(name);\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        Object.keys(value).forEach(function (name) {\n            if (_this.controls[name]) {\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.reset = /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = {}; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, name) {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the {@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     */\n    /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    FormGroup.prototype.getRawValue = /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    function () {\n        return this._reduceChildren({}, function (acc, control, name) {\n            acc[name] = control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this._reduceChildren(false, function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.controls[name]) {\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormGroup.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        var _this = this;\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) {\n            control.setParent(_this);\n            control._registerOnCollectionChange(_this._onCollectionChange);\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).value = this._reduceValue(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormGroup.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        var _this = this;\n        var /** @type {?} */ res = false;\n        this._forEachChild(function (control, name) {\n            res = res || (_this.contains(name) && condition(control));\n        });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._reduceValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this._reduceChildren({}, function (acc, control, name) {\n            if (control.enabled || _this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    FormGroup.prototype._reduceChildren = /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    function (initValue, fn) {\n        var /** @type {?} */ res = initValue;\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n            var controlName = _a[_i];\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroup.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, name) {\n            if (value[name] === undefined) {\n                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n            }\n        });\n    };\n    return FormGroup;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n *\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators can be passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormArray = /** @class */ (function (_super) {\n    __extends(FormArray, _super);\n    function FormArray(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Get the {@link AbstractControl} at the given `index` in the array.\n     */\n    /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.at = /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) { return this.controls[index]; };\n    /**\n     * Insert a new {@link AbstractControl} at the end of the array.\n     */\n    /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.push = /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Insert a new {@link AbstractControl} at the given `index` in the array.\n     */\n    /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.insert = /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove the control at the given `index` in the array.\n     */\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.removeAt = /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    Object.defineProperty(FormArray.prototype, \"length\", {\n        /**\n         * Length of the control array.\n         */\n        get: /**\n         * Length of the control array.\n         * @return {?}\n         */\n        function () { return this.controls.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Sets the value of the {@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        value.forEach(function (newValue, index) {\n            _this._throwIfControlMissing(index);\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        value.forEach(function (newValue, index) {\n            if (_this.at(index)) {\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.reset = /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = []; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, index) {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     */\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    FormArray.prototype.getRawValue = /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    function () {\n        return this.controls.map(function (control) {\n            return control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this.controls.reduce(function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (!this.controls.length) {\n            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.at(index)) {\n            throw new Error(\"Cannot find form control at index \" + index);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormArray.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        this.controls.forEach(function (control, index) { cb(control, index); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        (/** @type {?} */ (this)).value =\n            this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormArray.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) { return _this._registerControl(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormArray.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, i) {\n            if (value[i] === undefined) {\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n            }\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n            var control = _a[_i];\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype._registerControl = /**\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    };\n    return FormArray;\n}(AbstractControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return NgForm; })\n};\nvar resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * \\@howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgForm = /** @class */ (function (_super) {\n    __extends(NgForm, _super);\n    function NgForm(validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this.submitted = false;\n        _this._directives = [];\n        _this.ngSubmit = new EventEmitter();\n        _this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () { this._setUpdateStrategy(); };\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"controls\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form.controls; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            (/** @type {?} */ (dir)).control = /** @type {?} */ (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            _this._directives.push(dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(_this._directives, dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            var /** @type {?} */ group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ ctrl = /** @type {?} */ (_this.form.get(/** @type {?} */ ((dir.path))));\n            ctrl.setValue(value);\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.control.setValue(value); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgForm.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgForm.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    NgForm.prototype._findContainer = /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        path.pop();\n        return path.length ? /** @type {?} */ (this.form.get(path)) : this.form;\n    };\n    NgForm.decorators = [\n        { type: Directive, args: [{\n                    selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                    providers: [formDirectiveProvider],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    outputs: ['ngSubmit'],\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    NgForm.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgForm.propDecorators = {\n        \"options\": [{ type: Input, args: ['ngFormOptions',] },],\n    };\n    return NgForm;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FormErrorExamples = {\n    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TemplateDrivenErrors = /** @class */ (function () {\n    function TemplateDrivenErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.formGroupNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.missingNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelGroupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    return TemplateDrivenErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return NgModelGroup; })\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * \\@stable\n */\nvar NgModelGroup = /** @class */ (function (_super) {\n    __extends(NgModelGroup, _super);\n    function NgModelGroup(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgModelGroup.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    };\n    NgModelGroup.decorators = [\n        { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n    ];\n    /** @nocollapse */\n    NgModelGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgModelGroup.propDecorators = {\n        \"name\": [{ type: Input, args: ['ngModelGroup',] },],\n    };\n    return NgModelGroup;\n}(AbstractFormGroupDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return NgModel; })\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nvar resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * \\@howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgModel = /** @class */ (function (_super) {\n    __extends(NgModel, _super);\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        _this._registered = false;\n        _this.update = new EventEmitter();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.formDirective && this.formDirective.removeControl(this); };\n    Object.defineProperty(NgModel.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgModel.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._isStandalone = /**\n     * @return {?}\n     */\n    function () {\n        return !this._parent || !!(this.options && this.options.standalone);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpStandalone = /**\n     * @return {?}\n     */\n    function () {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkForErrors = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgModel.prototype._updateValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype._updateDisabled = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(function () {\n            if (isDisabled && !_this.control.disabled) {\n                _this.control.disable();\n            }\n            else if (!isDisabled && _this.control.disabled) {\n                _this.control.enable();\n            }\n        });\n    };\n    NgModel.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngModel]:not([formControlName]):not([formControl])',\n                    providers: [formControlBinding],\n                    exportAs: 'ngModel'\n                },] },\n    ];\n    /** @nocollapse */\n    NgModel.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    NgModel.propDecorators = {\n        \"name\": [{ type: Input },],\n        \"isDisabled\": [{ type: Input, args: ['disabled',] },],\n        \"model\": [{ type: Input, args: ['ngModel',] },],\n        \"options\": [{ type: Input, args: ['ngModelOptions',] },],\n        \"update\": [{ type: Output, args: ['ngModelChange',] },],\n    };\n    return NgModel;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ReactiveErrors = /** @class */ (function () {\n    function ReactiveErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.controlParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.ngModelGroupException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.missingFormException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.groupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.arrayParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.disabledAttrWarning = /**\n     * @return {?}\n     */\n    function () {\n        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    };\n    return ReactiveErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return FormControlDirective; })\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  \\@stable\n */\nvar FormControlDirective = /** @class */ (function (_super) {\n    __extends(FormControlDirective, _super);\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.update = new EventEmitter();\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n                /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlDirective.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype._isControlChanged = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        return changes.hasOwnProperty('form');\n    };\n    FormControlDirective.decorators = [\n        { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n    ];\n    /** @nocollapse */\n    FormControlDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlDirective.propDecorators = {\n        \"form\": [{ type: Input, args: ['formControl',] },],\n        \"model\": [{ type: Input, args: ['ngModel',] },],\n        \"update\": [{ type: Output, args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: Input, args: ['disabled',] },],\n    };\n    return FormControlDirective;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormGroupDirective; })\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormGroupDirective = /** @class */ (function (_super) {\n    __extends(FormGroupDirective, _super);\n    function FormGroupDirective(_validators, _asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._validators = _validators;\n        _this._asyncValidators = _asyncValidators;\n        _this.submitted = false;\n        _this.directives = [];\n        _this.form = /** @type {?} */ ((null));\n        _this.ngSubmit = new EventEmitter();\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormGroupDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    };\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { removeDir(this.directives, dir); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var /** @type {?} */ ctrl = /** @type {?} */ (this.form.get(dir.path));\n        ctrl.setValue(value);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateDomValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.directives.forEach(function (dir) {\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                (/** @type {?} */ (dir)).control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateRegistrations = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(function () { });\n        this._oldForm = this.form;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateValidators = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._checkFormPresent = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    };\n    FormGroupDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[formGroup]',\n                    providers: [formDirectiveProvider$1],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    FormGroupDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupDirective.propDecorators = {\n        \"form\": [{ type: Input, args: ['formGroup',] },],\n        \"ngSubmit\": [{ type: Output },],\n    };\n    return FormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormGroupName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormGroupName = /** @class */ (function (_super) {\n    __extends(FormGroupName, _super);\n    function FormGroupName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupName.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    };\n    FormGroupName.decorators = [\n        { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormGroupName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupName.propDecorators = {\n        \"name\": [{ type: Input, args: ['formGroupName',] },],\n    };\n    return FormGroupName;\n}(AbstractFormGroupDirective));\nvar formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormArrayName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by calling\n * its {\\@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormArrayName = /** @class */ (function (_super) {\n    __extends(FormArrayName, _super);\n    function FormArrayName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormArray(this);\n    };\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    };\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormArray(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? /** @type {?} */ (this._parent.formDirective) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    };\n    FormArrayName.decorators = [\n        { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormArrayName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormArrayName.propDecorators = {\n        \"name\": [{ type: Input, args: ['formArrayName',] },],\n    };\n    return FormArrayName;\n}(ControlContainer));\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return FormControlName; })\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n *\n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormControlName = /** @class */ (function (_super) {\n    __extends(FormControlName, _super);\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this._added = false;\n        _this.update = new EventEmitter();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    };\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlName.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    Object.defineProperty(FormControlName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ ((composeAsyncValidators(this._rawAsyncValidators)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType();\n        (/** @type {?} */ (this)).control = this.formDirective.addControl(this);\n        if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n            /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    };\n    FormControlName.decorators = [\n        { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n    ];\n    /** @nocollapse */\n    FormControlName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlName.propDecorators = {\n        \"name\": [{ type: Input, args: ['formControlName',] },],\n        \"model\": [{ type: Input, args: ['ngModel',] },],\n        \"update\": [{ type: Output, args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: Input, args: ['disabled',] },],\n    };\n    return FormControlName;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\nvar REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return RequiredValidator; }),\n    multi: true\n};\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return CheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@stable\n */\nvar RequiredValidator = /** @class */ (function () {\n    function RequiredValidator() {\n    }\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = value != null && value !== false && \"\" + value !== 'false';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    RequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.required(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RequiredValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    RequiredValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                    providers: [REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    RequiredValidator.ctorParameters = function () { return []; };\n    RequiredValidator.propDecorators = {\n        \"required\": [{ type: Input },],\n    };\n    return RequiredValidator;\n}());\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n */\nvar CheckboxRequiredValidator = /** @class */ (function (_super) {\n    __extends(CheckboxRequiredValidator, _super);\n    function CheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    CheckboxRequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.requiredTrue(c) : null;\n    };\n    CheckboxRequiredValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxRequiredValidator.ctorParameters = function () { return []; };\n    return CheckboxRequiredValidator;\n}(RequiredValidator));\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nvar EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return EmailValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n */\nvar EmailValidator = /** @class */ (function () {\n    function EmailValidator() {\n    }\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._enabled = value === '' || value === true || value === 'true';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    EmailValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this._enabled ? Validators.email(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EmailValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    EmailValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                    providers: [EMAIL_VALIDATOR]\n                },] },\n    ];\n    /** @nocollapse */\n    EmailValidator.ctorParameters = function () { return []; };\n    EmailValidator.propDecorators = {\n        \"email\": [{ type: Input },],\n    };\n    return EmailValidator;\n}());\n/**\n * \\@stable\n * @record\n */\n\n/**\n * \\@stable\n * @record\n */\n\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nvar MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MinLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@stable\n */\nvar MinLengthValidator = /** @class */ (function () {\n    function MinLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MinLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MinLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.minlength == null ? null : this._validator(c);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MinLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MinLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    };\n    MinLengthValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                    providers: [MIN_LENGTH_VALIDATOR],\n                    host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MinLengthValidator.ctorParameters = function () { return []; };\n    MinLengthValidator.propDecorators = {\n        \"minlength\": [{ type: Input },],\n    };\n    return MinLengthValidator;\n}());\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nvar MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MaxLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@stable\n */\nvar MaxLengthValidator = /** @class */ (function () {\n    function MaxLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.maxlength != null ? this._validator(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MaxLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    };\n    MaxLengthValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                    providers: [MAX_LENGTH_VALIDATOR],\n                    host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MaxLengthValidator.ctorParameters = function () { return []; };\n    MaxLengthValidator.propDecorators = {\n        \"maxlength\": [{ type: Input },],\n    };\n    return MaxLengthValidator;\n}());\nvar PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return PatternValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nvar PatternValidator = /** @class */ (function () {\n    function PatternValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PatternValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    PatternValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return this._validator(c); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    PatternValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    PatternValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () { this._validator = Validators.pattern(this.pattern); };\n    PatternValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                    providers: [PATTERN_VALIDATOR],\n                    host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    PatternValidator.ctorParameters = function () { return []; };\n    PatternValidator.propDecorators = {\n        \"pattern\": [{ type: Input },],\n    };\n    return PatternValidator;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * \\@howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  * **NgModule**: {\\@link ReactiveFormsModule}\n *\n * \\@stable\n */\nvar FormBuilder = /** @class */ (function () {\n    function FormBuilder() {\n    }\n    /**\n     * Construct a new {@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {@link FormGroup} constructor for more details.\n     */\n    /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    FormBuilder.prototype.group = /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    function (controlsConfig, extra) {\n        if (extra === void 0) { extra = null; }\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;\n        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n    };\n    /**\n     * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     */\n    /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.control = /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (formState, validator, asyncValidator) {\n        return new FormControl(formState, validator, asyncValidator);\n    };\n    /**\n     * Construct a {@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     */\n    /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.array = /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (controlsConfig, validator, asyncValidator) {\n        var _this = this;\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n        return new FormArray(controls, validator, asyncValidator);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._reduceControls = /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    function (controlsConfig) {\n        var _this = this;\n        var /** @type {?} */ controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._createControl = /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    function (controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            var /** @type {?} */ value = controlConfig[0];\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    };\n    FormBuilder.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    FormBuilder.ctorParameters = function () { return []; };\n    return FormBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@stable\n */\nvar VERSION = new Version('6.0.0-beta.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@experimental\n */\nvar NgNoValidate = /** @class */ (function () {\n    function NgNoValidate() {\n    }\n    NgNoValidate.decorators = [\n        { type: Directive, args: [{\n                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                    host: { 'novalidate': '' },\n                },] },\n    ];\n    /** @nocollapse */\n    NgNoValidate.ctorParameters = function () { return []; };\n    return NgNoValidate;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nvar InternalFormsSharedModule = /** @class */ (function () {\n    function InternalFormsSharedModule() {\n    }\n    InternalFormsSharedModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: SHARED_FORM_DIRECTIVES,\n                    exports: SHARED_FORM_DIRECTIVES,\n                },] },\n    ];\n    /** @nocollapse */\n    InternalFormsSharedModule.ctorParameters = function () { return []; };\n    return InternalFormsSharedModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The ng module for forms.\n * \\@stable\n */\nvar FormsModule = /** @class */ (function () {\n    function FormsModule() {\n    }\n    FormsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                    providers: [RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    FormsModule.ctorParameters = function () { return []; };\n    return FormsModule;\n}());\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nvar ReactiveFormsModule = /** @class */ (function () {\n    function ReactiveFormsModule() {\n    }\n    ReactiveFormsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                    providers: [FormBuilder, RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    ReactiveFormsModule.ctorParameters = function () { return []; };\n    return ReactiveFormsModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, RadioControlValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule, InternalFormsSharedModule as ɵba, REACTIVE_DRIVEN_DIRECTIVES as ɵz, SHARED_FORM_DIRECTIVES as ɵx, TEMPLATE_DRIVEN_DIRECTIVES as ɵy, CHECKBOX_VALUE_ACCESSOR as ɵa, DEFAULT_VALUE_ACCESSOR as ɵb, AbstractControlStatus as ɵc, ngControlStatusHost as ɵd, formDirectiveProvider as ɵe, formControlBinding as ɵf, modelGroupProvider as ɵg, NgNoValidate as ɵbf, NUMBER_VALUE_ACCESSOR as ɵbb, NumberValueAccessor as ɵbc, RADIO_VALUE_ACCESSOR as ɵh, RadioControlRegistry as ɵi, RANGE_VALUE_ACCESSOR as ɵbd, RangeValueAccessor as ɵbe, formControlBinding$1 as ɵj, controlNameBinding as ɵk, formDirectiveProvider$1 as ɵl, formArrayNameProvider as ɵn, formGroupNameProvider as ɵm, SELECT_VALUE_ACCESSOR as ɵo, NgSelectMultipleOption as ɵq, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵp, CHECKBOX_REQUIRED_VALIDATOR as ɵs, EMAIL_VALIDATOR as ɵt, MAX_LENGTH_VALIDATOR as ɵv, MIN_LENGTH_VALIDATOR as ɵu, PATTERN_VALIDATOR as ɵw, REQUIRED_VALIDATOR as ɵr };\n//# sourceMappingURL=forms.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/forms/esm5/forms.js\n// module id = 92\n// module chunks = 3 5 6 7","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/map.js\n// module id = 93\n// module chunks = 0 1 3 4 8","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/observable/forkJoin.js\n// module id = 94\n// module chunks = 0 3 5 6 7","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/observable/ForkJoinObservable.js\n// module id = 95\n// module chunks = 0 3 5 6 7","/**\n * @license Angular v6.0.0-beta.0\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { Observable } from 'rxjs/Observable';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n/** @enum {number} */\nvar ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n/** @enum {number} */\nvar ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n/** @enum {number} */\nvar ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n/** @enum {number} */\nvar ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Headers = /** @class */ (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var /** @type {?} */ values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name_1 = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    Headers.prototype.toJSON = /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[/** @type {?} */ ((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar ResponseOptions = /** @class */ (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseResponseOptions = /** @class */ (function (_super) {\n    __extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar ConnectionBackend = /** @class */ (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar Connection = /** @class */ (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar XSRFStrategy = /** @class */ (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * Required structure when constructing new Request();\n * @record\n */\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n *\n */\nvar QueryEncoder = /** @class */ (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar URLSearchParams = /** @class */ (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = /** @class */ (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return /** @type {?} */ (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof Blob) {\n            return /** @type {?} */ (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Response = /** @class */ (function (_super) {\n    __extends(Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = /** @type {?} */ ((responseOptions.status));\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = /** @type {?} */ ((responseOptions.type));\n        _this.url = /** @type {?} */ ((responseOptions.url));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = /** @class */ (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = /**\n     * @return {?}\n     */\n    function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPConnection = /** @class */ (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var /** @type {?} */ id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var /** @type {?} */ callback = _dom.requestCallback(_this._id);\n            var /** @type {?} */ url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var /** @type {?} */ script = _this._script = _dom.build(url);\n            var /** @type {?} */ onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var /** @type {?} */ responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var /** @type {?} */ onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPBackend = /** @class */ (function (_super) {\n    __extends(JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRConnection = /** @class */ (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            var /** @type {?} */ _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var /** @type {?} */ onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var /** @type {?} */ status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var /** @type {?} */ body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var /** @type {?} */ headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n                var /** @type {?} */ statusText = _xhr.statusText || 'OK';\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var /** @type {?} */ response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var /** @type {?} */ onError = function (err) {\n                var /** @type {?} */ responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar CookieXSRFStrategy = /** @class */ (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var /** @type {?} */ xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRBackend = /** @class */ (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar RequestOptions = /** @class */ (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = /**\n     * @param {?=} params\n     * @return {?}\n     */\n    function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseRequestOptions = /** @class */ (function (_super) {\n    __extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Request = /** @class */ (function (_super) {\n    __extends(Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var /** @type {?} */ url = requestOptions.url;\n        _this.url = /** @type {?} */ ((requestOptions.url));\n        var /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var /** @type {?} */ params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var /** @type {?} */ prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = /** @type {?} */ ((requestOptions.withCredentials));\n        _this.responseType = /** @type {?} */ ((requestOptions.responseType));\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return /** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return /** @type {?} */ (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Http = /** @class */ (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar Jsonp = /** @class */ (function (_super) {\n    __extends(Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar HttpModule = /** @class */ (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JsonpModule = /** @class */ (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar VERSION = new Version('6.0.0-beta.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as ɵe, Body as ɵf, _createDefaultCookieXSRFStrategy as ɵa, httpFactory as ɵb, jsonpFactory as ɵc };\n//# sourceMappingURL=http.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/http/esm5/http.js\n// module id = 96\n// module chunks = 3 8"],"sourceRoot":""}