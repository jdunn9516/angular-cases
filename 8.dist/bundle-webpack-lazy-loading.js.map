{"version":3,"sources":["webpack:///8.dist/bundle-webpack-lazy-loading.js","webpack:///./components/lazy-loaded-tree-view/tree-view.ngfactory.js","webpack:///./components/lazy-loaded-tree-view/country-demo.ngfactory.js","webpack:///./components/lazy-loaded-tree-view/tree-node.ts","webpack:///./components/lazy-loaded-tree-view/redux/tree-node-reducer.ts","webpack:///./components/lazy-loaded-tree-view/redux/store.ts","webpack:///./components/lazy-loaded-tree-view/tree-node-service.ts","webpack:///./components/lazy-loaded-tree-view/country-demo.ts","webpack:///./components/lazy-loaded-tree-view/tree-view.ts","webpack:///./app-lazy/lazy-modules/lazy-loaded-treeview.module.ts","webpack:///./app-lazy/lazy-modules/lazy-loaded-treeview.module.ngfactory.js","webpack:///./node_modules/@angular/http/esm5/http.js?34ea","webpack:///./node_modules/rxjs/add/operator/map.js?fa96***"],"names":["webpackJsonp","84","module","__webpack_exports__","__webpack_require__","View_LazyTreeView_2","_l","tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__","View_LazyTreeView_0","RenderType_LazyTreeView","tree_view_LazyTreeView","store_Store","tree_node_service_TreeNodeService","root","_ck","_v","parent","context","$implicit","View_LazyTreeView_1","en","$event","ad","expand","__WEBPACK_IMPORTED_MODULE_4__angular_common__","klass","ngClass","tree-node-no-children","ngIf","showIcon","expanded","icon","name","ngForOf","component","items","View_LazyTreeView_Host_0","View_CountryDemo_0","country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__","node","View_CountryDemo_Host_0","RenderType_CountryDemo","__WEBPACK_IMPORTED_MODULE_5__angular_http__","country_demo_CountryDemo","Object","defineProperty","value","TreeNode","key","url","this","getIcon","prototype","treeNodeReducer","state","action","map","n","__WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_1_rxjs_Subject__","__WEBPACK_IMPORTED_MODULE_2__angular_http__","__decorate","decorators","target","desc","d","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","__metadata","k","v","metadata","Store","_http","_this","dispatcher","treeNodes","nodes","subscribe","handleAction","next","get","res","json","getTreeNodes","hasOwnProperty","asObservable","dispatchAction","tree_node_service___WEBPACK_IMPORTED_MODULE_0__angular_core__","tree_node_service___decorate","tree_node_service___metadata","TreeNodeService","_store","loadTreeNodes","country_demo___WEBPACK_IMPORTED_MODULE_0__angular_core__","country_demo___decorate","CountryDemo","ngOnInit","selector","template","providers","tree_view___WEBPACK_IMPORTED_MODULE_0__angular_core__","tree_view___decorate","tree_view___metadata","LazyTreeView","_treeNodeService","subscription","ngOnDestroy","unsubscribe","lazy_loaded_treeview_module___WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_1__angular_common__","__WEBPACK_IMPORTED_MODULE_2__angular_router__","__WEBPACK_IMPORTED_MODULE_3__angular_http__","__WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_map__","lazy_loaded_treeview_module___decorate","lazy_loaded_treeview_module_LazyTreeviewModule","LazyTreeviewModule","declarations","imports","forChild","path","styles_LazyTreeView","encapsulation","styles","data","styles_CountryDemo","CountryDemoNgFactory","LazyTreeviewModuleNgFactory","lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_3__angular_common__","__WEBPACK_IMPORTED_MODULE_4__angular_http__","__WEBPACK_IMPORTED_MODULE_5__angular_router__","95","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","Error","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","strLen","charCodeAt","buffer","paramParser","rawParams","Map","split","forEach","param","eqIdx","indexOf","_a","slice","val","list","push","set","standardEncoding","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","urlEncodeParams","params","searchParams","URLSearchParams","keys","Array","isArray","element","append","toString","httpRequest","backend","request","createConnection","response","mergeOptions","defaultOpts","providedOpts","newOptions","merge","RequestOptions","search","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","Jsonp","BrowserXhr","XHRBackend","BaseRequestOptions","BaseResponseOptions","ResponseOptions","HttpModule","XSRFStrategy","__WEBPACK_IMPORTED_MODULE_1_tslib__","__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__","__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__","build","XMLHttpRequest","type","ctorParameters","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","_headers","_normalizedNames","values","delete","fromResponseHeaderString","headersString","line","index","name_1","trim","getAll","lcName","toLowerCase","fn","has","from","join","mayBeSetNormalizedName","toJSON","serialized","apply","entries","opts","status","statusText","options","_super","call","ConnectionBackend","Connection","isSuccess","QueryEncoder","encodeKey","encodeValue","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","replaceAll","paramsList","Body","_body","parse","text","encodingHint","String","fromCharCode","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","BrowserJsonp","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","responseOptions_1","error","_responseData","complete","onError","message","addEventListener","removeEventListener","finished","JSONPBackend","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","getBody","abort","contentType","_cookieName","_headerName","configureRequest","xsrfToken","getCookie","_browserXHR","_xsrfStrategy","_mergeSearchParams","enumerable","configurable","_parseParams","objParams","item","_appendParam","Request","paramsArg","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","noop","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","args","provide","useFactory","deps","useClass","JsonpModule","96","exports","Observable_1","map_1","Observable"],"mappings":"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","file":"8.dist/bundle-webpack-lazy-loading.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 84:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/tree-node.ts\nvar TreeNode = (function () {\n    function TreeNode(key, url, name) {\n        this.key = key;\n        this.url = url;\n        this.name = name;\n        this.showIcon = false;\n        this.expanded = false;\n        this.icon = null;\n        if (url) {\n            this.showIcon = true;\n            this.icon = this.getIcon();\n        }\n    }\n    TreeNode.prototype.expand = function () {\n        this.expanded = !this.expanded;\n        this.icon = this.getIcon();\n    };\n    TreeNode.prototype.getIcon = function () {\n        if (this.showIcon === true) {\n            if (this.expanded) {\n                return '- ';\n            }\n            return '+ ';\n        }\n        return null;\n    };\n    return TreeNode;\n}());\n\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/redux/tree-node-reducer.ts\n\nvar treeNodeReducer = function (state, action) {\n    if (state === void 0) { state = []; }\n    switch (action.name) {\n        case 'LOAD_NODES':\n            return state['nodes'].map(function (n) {\n                return new TreeNode(n.key, n.url, n.name);\n            });\n    }\n};\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/redux/store.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Subject__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_Subject__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_http__ = __webpack_require__(95);\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\nvar store_Store = (function () {\n    function Store(_http) {\n        var _this = this;\n        this._http = _http;\n        this.dispatcher = new __WEBPACK_IMPORTED_MODULE_1_rxjs_Subject__[\"Subject\"]();\n        this.treeNodes = {};\n        this.nodes = {};\n        this.dispatcher.subscribe(function (action) { return _this.handleAction(action); });\n    }\n    Store.prototype.handleAction = function (action) {\n        var _this = this;\n        if (action.name === 'LOAD_NODES') {\n            if (this.nodes[action.key]) {\n                this.treeNodes[action.key].next(this.nodes[action.key]);\n            }\n            else {\n                this._http\n                    .get(action.url)\n                    .map(function (res) { return res.json(); })\n                    .subscribe(function (res) {\n                    _this.nodes[action.key] = treeNodeReducer(res, action);\n                    _this.treeNodes[action.key].next(_this.nodes[action.key]);\n                });\n            }\n        }\n    };\n    Store.prototype.getTreeNodes = function (key) {\n        if (!this.treeNodes.hasOwnProperty(key)) {\n            this.treeNodes[key] = new __WEBPACK_IMPORTED_MODULE_1_rxjs_Subject__[\"Subject\"]();\n        }\n        return this.treeNodes[key].asObservable();\n    };\n    Store.prototype.dispatchAction = function (action) {\n        this.dispatcher.next(action);\n    };\n    Store = __decorate([\n        __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */](),\n        __metadata(\"design:paramtypes\", [__WEBPACK_IMPORTED_MODULE_2__angular_http__[\"d\" /* Http */]])\n    ], Store);\n    return Store;\n}());\n\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/tree-node-service.ts\n/* harmony import */ var tree_node_service___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\nvar tree_node_service___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar tree_node_service___metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\nvar tree_node_service_TreeNodeService = (function () {\n    function TreeNodeService(_store) {\n        this._store = _store;\n    }\n    TreeNodeService.prototype.loadTreeNodes = function (root) {\n        if (root.url) {\n            this._store.dispatchAction({ key: root.key, url: root.url, name: 'LOAD_NODES' });\n        }\n    };\n    TreeNodeService = tree_node_service___decorate([\n        tree_node_service___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */](),\n        tree_node_service___metadata(\"design:paramtypes\", [store_Store])\n    ], TreeNodeService);\n    return TreeNodeService;\n}());\n\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/country-demo.ts\n/* harmony import */ var country_demo___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\nvar country_demo___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nvar country_demo_CountryDemo = (function () {\n    function CountryDemo() {\n        this.node = null;\n    }\n    CountryDemo.prototype.ngOnInit = function () {\n        this.node = new TreeNode('root', './tree-view-data/countries.json', '');\n    };\n    CountryDemo = country_demo___decorate([\n        country_demo___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"k\" /* Component */]({\n            selector: 'country-demo',\n            template: \"<h1>Lazy loaded TreeView using Redux and RxJs</h1>\\n            <lazy-tree-view [root]=\\\"node\\\"></lazy-tree-view>\",\n            providers: [store_Store, tree_node_service_TreeNodeService]\n        })\n    ], CountryDemo);\n    return CountryDemo;\n}());\n\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/tree-view.ts\n/* harmony import */ var tree_view___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\nvar tree_view___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar tree_view___metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\nvar tree_view_LazyTreeView = (function () {\n    function LazyTreeView(_store, _treeNodeService) {\n        this._store = _store;\n        this._treeNodeService = _treeNodeService;\n        this.items = [];\n    }\n    LazyTreeView.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this._store.getTreeNodes(this.root.key).subscribe(function (res) {\n            _this.items = res;\n        });\n        this._treeNodeService.loadTreeNodes(this.root);\n    };\n    LazyTreeView.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    tree_view___decorate([\n        tree_view___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"y\" /* Input */](),\n        tree_view___metadata(\"design:type\", TreeNode)\n    ], LazyTreeView.prototype, \"root\", void 0);\n    LazyTreeView = tree_view___decorate([\n        tree_view___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"k\" /* Component */]({\n            template: \"\\n  <ul>\\n  <li *ngFor=\\\"let node of items\\\">\\n\\n    <span class=\\\"iconButton\\\" [ngClass]='{\\\"tree-node-no-children\\\": !node.showIcon}' (click)=\\\"node.expand()\\\">{{node.icon}}</span>\\n    <span>{{ node.name }}</span>\\n\\n    <div *ngIf=\\\"node.expanded\\\">\\n      <lazy-tree-view [root]=\\\"node\\\"></lazy-tree-view>\\n    </div>\\n  </li>\\n  </ul>\\n\",\n            selector: 'lazy-tree-view'\n        }),\n        tree_view___metadata(\"design:paramtypes\", [store_Store, tree_node_service_TreeNodeService])\n    ], LazyTreeView);\n    return LazyTreeView;\n}());\n\n\n// CONCATENATED MODULE: ./app-lazy/lazy-modules/lazy-loaded-treeview.module.ts\n/* harmony import */ var lazy_loaded_treeview_module___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_http__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_map__ = __webpack_require__(96);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_map__);\nvar lazy_loaded_treeview_module___decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\n\n\nvar lazy_loaded_treeview_module_LazyTreeviewModule = (function () {\n    function LazyTreeviewModule() {\n    }\n    LazyTreeviewModule = lazy_loaded_treeview_module___decorate([\n        lazy_loaded_treeview_module___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"C\" /* NgModule */]({\n            declarations: [country_demo_CountryDemo, tree_view_LazyTreeView],\n            imports: [\n                __WEBPACK_IMPORTED_MODULE_1__angular_common__[\"c\" /* CommonModule */],\n                __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"e\" /* HttpModule */],\n                __WEBPACK_IMPORTED_MODULE_2__angular_router__[\"m\" /* RouterModule */].forChild([\n                    { path: '', component: country_demo_CountryDemo }\n                ])\n            ]\n        })\n    ], LazyTreeviewModule);\n    return LazyTreeviewModule;\n}());\n\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/tree-view.ngfactory.js\n/* harmony import */ var tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_common__ = __webpack_require__(4);\n\n\n\n\n\nvar styles_LazyTreeView = [];\nvar RenderType_LazyTreeView = tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵcrt */]({ encapsulation: 2, styles: styles_LazyTreeView, data: {} });\n\nfunction View_LazyTreeView_2(_l) { return tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_39\" /* ɵvid */](0, [(_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](0, 0, null, null, 2, \"div\", [], null, null, null, null, null)), (_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](1, 0, null, null, 1, \"lazy-tree-view\", [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](2, 245760, null, 0, tree_view_LazyTreeView, [store_Store, tree_node_service_TreeNodeService], { root: [0, \"root\"] }, null)], function (_ck, _v) { var currVal_0 = _v.parent.context.$implicit; _ck(_v, 2, 0, currVal_0); }, null); }\nfunction View_LazyTreeView_1(_l) { return tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_39\" /* ɵvid */](0, [(_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](0, 0, null, null, 8, \"li\", [], null, null, null, null, null)), (_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](1, 0, null, null, 3, \"span\", [[\"class\", \"iconButton\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (_v.context.$implicit.expand() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](2, 278528, null, 0, __WEBPACK_IMPORTED_MODULE_4__angular_common__[\"i\" /* NgClass */], [tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"z\" /* IterableDiffers */], tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"A\" /* KeyValueDiffers */], tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"o\" /* ElementRef */], tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"N\" /* Renderer2 */]], { klass: [0, \"klass\"], ngClass: [1, \"ngClass\"] }, null), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵpod */](3, { \"tree-node-no-children\": 0 }), (_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵted */](4, null, [\"\", \"\"])), (_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](5, 0, null, null, 1, \"span\", [], null, null, null, null, null)), (_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵted */](6, null, [\"\", \"\"])), (_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_12\" /* ɵand */](16777216, null, null, 1, null, View_LazyTreeView_2)), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](8, 16384, null, 0, __WEBPACK_IMPORTED_MODULE_4__angular_common__[\"k\" /* NgIf */], [tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_0\" /* ViewContainerRef */], tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"W\" /* TemplateRef */]], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var currVal_0 = \"iconButton\"; var currVal_1 = _ck(_v, 3, 0, !_v.context.$implicit.showIcon); _ck(_v, 2, 0, currVal_0, currVal_1); var currVal_4 = _v.context.$implicit.expanded; _ck(_v, 8, 0, currVal_4); }, function (_ck, _v) { var currVal_2 = _v.context.$implicit.icon; _ck(_v, 4, 0, currVal_2); var currVal_3 = _v.context.$implicit.name; _ck(_v, 6, 0, currVal_3); }); }\nfunction View_LazyTreeView_0(_l) { return tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_39\" /* ɵvid */](0, [(_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](0, 0, null, null, 2, \"ul\", [], null, null, null, null, null)), (_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_12\" /* ɵand */](16777216, null, null, 1, null, View_LazyTreeView_1)), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](2, 802816, null, 0, __WEBPACK_IMPORTED_MODULE_4__angular_common__[\"j\" /* NgForOf */], [tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_0\" /* ViewContainerRef */], tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"W\" /* TemplateRef */], tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"z\" /* IterableDiffers */]], { ngForOf: [0, \"ngForOf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.items; _ck(_v, 2, 0, currVal_0); }, null); }\nfunction View_LazyTreeView_Host_0(_l) { return tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_39\" /* ɵvid */](0, [(_l()(), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](0, 0, null, null, 1, \"lazy-tree-view\", [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)), tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](1, 245760, null, 0, tree_view_LazyTreeView, [store_Store, tree_node_service_TreeNodeService], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar LazyTreeViewNgFactory = tree_view_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_13\" /* ɵccf */](\"lazy-tree-view\", tree_view_LazyTreeView, View_LazyTreeView_Host_0, { root: \"root\" }, {}, []);\n\n\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/country-demo.ngfactory.js\n/* harmony import */ var country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_http__ = __webpack_require__(95);\n\n\n\n\n\n\n\nvar styles_CountryDemo = [];\nvar RenderType_CountryDemo = country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵcrt */]({ encapsulation: 2, styles: styles_CountryDemo, data: {} });\n\nfunction View_CountryDemo_0(_l) { return country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_39\" /* ɵvid */](0, [(_l()(), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](0, 0, null, null, 1, \"h1\", [], null, null, null, null, null)), (_l()(), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵted */](-1, null, [\"Lazy loaded TreeView using Redux and RxJs\"])), (_l()(), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](2, 0, null, null, 1, \"lazy-tree-view\", [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](3, 245760, null, 0, tree_view_LazyTreeView, [store_Store, tree_node_service_TreeNodeService], { root: [0, \"root\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.node; _ck(_v, 3, 0, currVal_0); }, null); }\nfunction View_CountryDemo_Host_0(_l) { return country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_39\" /* ɵvid */](0, [(_l()(), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵeld */](0, 0, null, null, 3, \"country-demo\", [], null, null, null, View_CountryDemo_0, RenderType_CountryDemo)), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_34\" /* ɵprd */](4608, null, store_Store, store_Store, [__WEBPACK_IMPORTED_MODULE_5__angular_http__[\"d\" /* Http */]]), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_34\" /* ɵprd */](4608, null, tree_node_service_TreeNodeService, tree_node_service_TreeNodeService, [store_Store]), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](3, 114688, null, 0, country_demo_CountryDemo, [], null, null)], function (_ck, _v) { _ck(_v, 3, 0); }, null); }\nvar CountryDemoNgFactory = country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_13\" /* ɵccf */](\"country-demo\", country_demo_CountryDemo, View_CountryDemo_Host_0, {}, {}, []);\n\n\n// CONCATENATED MODULE: ./app-lazy/lazy-modules/lazy-loaded-treeview.module.ngfactory.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LazyTreeviewModuleNgFactory\", function() { return LazyTreeviewModuleNgFactory; });\n/* harmony import */ var lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_common__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_http__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(9);\n\n\n\n\n\n\n\nvar LazyTreeviewModuleNgFactory = lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵcmf */](lazy_loaded_treeview_module_LazyTreeviewModule, [], function (_l) { return lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmod */]([lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](512, lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"l\" /* ComponentFactoryResolver */], lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_10\" /* ɵCodegenComponentFactoryResolver */], [[8, [CountryDemoNgFactory]], [3, lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"l\" /* ComponentFactoryResolver */]], lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"F\" /* NgModuleRef */]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"m\" /* NgLocalization */], __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"l\" /* NgLocaleLocalization */], [lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"B\" /* LOCALE_ID */], [2, __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"t\" /* ɵa */]]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"c\" /* BrowserXhr */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"c\" /* BrowserXhr */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"g\" /* ResponseOptions */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"b\" /* BaseResponseOptions */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](5120, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"i\" /* XSRFStrategy */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"j\" /* ɵa */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"h\" /* XHRBackend */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"h\" /* XHRBackend */], [__WEBPACK_IMPORTED_MODULE_4__angular_http__[\"c\" /* BrowserXhr */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"g\" /* ResponseOptions */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"i\" /* XSRFStrategy */]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"f\" /* RequestOptions */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"a\" /* BaseRequestOptions */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](5120, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"d\" /* Http */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"k\" /* ɵb */], [__WEBPACK_IMPORTED_MODULE_4__angular_http__[\"h\" /* XHRBackend */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"f\" /* RequestOptions */]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"c\" /* CommonModule */], __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"c\" /* CommonModule */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"e\" /* HttpModule */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"e\" /* HttpModule */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"m\" /* RouterModule */], __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"m\" /* RouterModule */], [[2, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"r\" /* ɵa */]], [2, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"k\" /* Router */]]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](512, lazy_loaded_treeview_module_LazyTreeviewModule, lazy_loaded_treeview_module_LazyTreeviewModule, []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵmpd */](1024, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"i\" /* ROUTES */], function () { return [[{ path: \"\", component: country_demo_CountryDemo }]]; }, [])]); });\n\n\n\n/***/ }),\n\n/***/ 95:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return BrowserXhr; });\n/* unused harmony export JSONPBackend */\n/* unused harmony export JSONPConnection */\n/* unused harmony export CookieXSRFStrategy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return XHRBackend; });\n/* unused harmony export XHRConnection */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseRequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return RequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BaseResponseOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return ResponseOptions; });\n/* unused harmony export ReadyState */\n/* unused harmony export RequestMethod */\n/* unused harmony export ResponseContentType */\n/* unused harmony export ResponseType */\n/* unused harmony export Headers */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return Http; });\n/* unused harmony export Jsonp */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return HttpModule; });\n/* unused harmony export JsonpModule */\n/* unused harmony export Connection */\n/* unused harmony export ConnectionBackend */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return XSRFStrategy; });\n/* unused harmony export Request */\n/* unused harmony export Response */\n/* unused harmony export QueryEncoder */\n/* unused harmony export URLSearchParams */\n/* unused harmony export VERSION */\n/* unused harmony export ɵe */\n/* unused harmony export ɵf */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return _createDefaultCookieXSRFStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return httpFactory; });\n/* unused harmony export ɵc */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tslib__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(6);\n/**\n * @license Angular v5.0.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n/** @enum {number} */\nvar ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n/** @enum {number} */\nvar ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n/** @enum {number} */\nvar ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n/** @enum {number} */\nvar ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Headers = (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var /** @type {?} */ values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name_1 = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    Headers.prototype.toJSON = /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[/** @type {?} */ ((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar ResponseOptions = (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseResponseOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * Required structure when constructing new Request();\n * @record\n */\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar URLSearchParams = (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return /** @type {?} */ (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof Blob) {\n            return /** @type {?} */ (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Response = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = /** @type {?} */ ((responseOptions.status));\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = /** @type {?} */ ((responseOptions.type));\n        _this.url = /** @type {?} */ ((responseOptions.url));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = /**\n     * @return {?}\n     */\n    function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPConnection = (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var /** @type {?} */ id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var /** @type {?} */ callback = _dom.requestCallback(_this._id);\n            var /** @type {?} */ url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var /** @type {?} */ script = _this._script = _dom.build(url);\n            var /** @type {?} */ onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var /** @type {?} */ responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var /** @type {?} */ onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPBackend = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRConnection = (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            var /** @type {?} */ _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var /** @type {?} */ onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var /** @type {?} */ status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var /** @type {?} */ body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var /** @type {?} */ headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n                var /** @type {?} */ statusText = _xhr.statusText || 'OK';\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var /** @type {?} */ response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var /** @type {?} */ onError = function (err) {\n                var /** @type {?} */ responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar CookieXSRFStrategy = (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var /** @type {?} */ xsrfToken = __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__[\"r\" /* ɵgetDOM */]().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRBackend = (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar RequestOptions = (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = /**\n     * @param {?=} params\n     * @return {?}\n     */\n    function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseRequestOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Request = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var /** @type {?} */ url = requestOptions.url;\n        _this.url = /** @type {?} */ ((requestOptions.url));\n        var /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var /** @type {?} */ params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var /** @type {?} */ prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = /** @type {?} */ ((requestOptions.withCredentials));\n        _this.responseType = /** @type {?} */ ((requestOptions.responseType));\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return /** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return /** @type {?} */ (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Http = (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar Jsonp = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"v\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"C\" /* NgModule */], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"C\" /* NgModule */], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Y\" /* Version */]('5.0.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=http.js.map\n\n\n/***/ }),\n\n/***/ 96:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(1);\nvar map_1 = __webpack_require__(36);\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 8.dist/bundle-webpack-lazy-loading.js","import * as i0 from \"@angular/core\";\nimport * as i1 from \"./tree-view\";\nimport * as i2 from \"./redux/store\";\nimport * as i3 from \"./tree-node-service\";\nimport * as i4 from \"@angular/common\";\nvar styles_LazyTreeView = [];\nvar RenderType_LazyTreeView = i0.ɵcrt({ encapsulation: 2, styles: styles_LazyTreeView, data: {} });\nexport { RenderType_LazyTreeView as RenderType_LazyTreeView };\nfunction View_LazyTreeView_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, \"div\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 1, \"lazy-tree-view\", [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)), i0.ɵdid(2, 245760, null, 0, i1.LazyTreeView, [i2.Store, i3.TreeNodeService], { root: [0, \"root\"] }, null)], function (_ck, _v) { var currVal_0 = _v.parent.context.$implicit; _ck(_v, 2, 0, currVal_0); }, null); }\nfunction View_LazyTreeView_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 8, \"li\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 3, \"span\", [[\"class\", \"iconButton\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (_v.context.$implicit.expand() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.ɵdid(2, 278528, null, 0, i4.NgClass, [i0.IterableDiffers, i0.KeyValueDiffers, i0.ElementRef, i0.Renderer2], { klass: [0, \"klass\"], ngClass: [1, \"ngClass\"] }, null), i0.ɵpod(3, { \"tree-node-no-children\": 0 }), (_l()(), i0.ɵted(4, null, [\"\", \"\"])), (_l()(), i0.ɵeld(5, 0, null, null, 1, \"span\", [], null, null, null, null, null)), (_l()(), i0.ɵted(6, null, [\"\", \"\"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_LazyTreeView_2)), i0.ɵdid(8, 16384, null, 0, i4.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var currVal_0 = \"iconButton\"; var currVal_1 = _ck(_v, 3, 0, !_v.context.$implicit.showIcon); _ck(_v, 2, 0, currVal_0, currVal_1); var currVal_4 = _v.context.$implicit.expanded; _ck(_v, 8, 0, currVal_4); }, function (_ck, _v) { var currVal_2 = _v.context.$implicit.icon; _ck(_v, 4, 0, currVal_2); var currVal_3 = _v.context.$implicit.name; _ck(_v, 6, 0, currVal_3); }); }\nexport function View_LazyTreeView_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, \"ul\", [], null, null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_LazyTreeView_1)), i0.ɵdid(2, 802816, null, 0, i4.NgForOf, [i0.ViewContainerRef, i0.TemplateRef, i0.IterableDiffers], { ngForOf: [0, \"ngForOf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.items; _ck(_v, 2, 0, currVal_0); }, null); }\nexport function View_LazyTreeView_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"lazy-tree-view\", [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)), i0.ɵdid(1, 245760, null, 0, i1.LazyTreeView, [i2.Store, i3.TreeNodeService], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar LazyTreeViewNgFactory = i0.ɵccf(\"lazy-tree-view\", i1.LazyTreeView, View_LazyTreeView_Host_0, { root: \"root\" }, {}, []);\nexport { LazyTreeViewNgFactory as LazyTreeViewNgFactory };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/tree-view.ngfactory.js\n// module id = null\n// module chunks = ","import * as i0 from \"@angular/core\";\nimport * as i1 from \"./tree-view.ngfactory\";\nimport * as i2 from \"./tree-view\";\nimport * as i3 from \"./redux/store\";\nimport * as i4 from \"./tree-node-service\";\nimport * as i5 from \"@angular/http\";\nimport * as i6 from \"./country-demo\";\nvar styles_CountryDemo = [];\nvar RenderType_CountryDemo = i0.ɵcrt({ encapsulation: 2, styles: styles_CountryDemo, data: {} });\nexport { RenderType_CountryDemo as RenderType_CountryDemo };\nexport function View_CountryDemo_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"h1\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Lazy loaded TreeView using Redux and RxJs\"])), (_l()(), i0.ɵeld(2, 0, null, null, 1, \"lazy-tree-view\", [], null, null, null, i1.View_LazyTreeView_0, i1.RenderType_LazyTreeView)), i0.ɵdid(3, 245760, null, 0, i2.LazyTreeView, [i3.Store, i4.TreeNodeService], { root: [0, \"root\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.node; _ck(_v, 3, 0, currVal_0); }, null); }\nexport function View_CountryDemo_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"country-demo\", [], null, null, null, View_CountryDemo_0, RenderType_CountryDemo)), i0.ɵprd(4608, null, i3.Store, i3.Store, [i5.Http]), i0.ɵprd(4608, null, i4.TreeNodeService, i4.TreeNodeService, [i3.Store]), i0.ɵdid(3, 114688, null, 0, i6.CountryDemo, [], null, null)], function (_ck, _v) { _ck(_v, 3, 0); }, null); }\nvar CountryDemoNgFactory = i0.ɵccf(\"country-demo\", i6.CountryDemo, View_CountryDemo_Host_0, {}, {}, []);\nexport { CountryDemoNgFactory as CountryDemoNgFactory };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/country-demo.ngfactory.js\n// module id = null\n// module chunks = ","var TreeNode = (function () {\n    function TreeNode(key, url, name) {\n        this.key = key;\n        this.url = url;\n        this.name = name;\n        this.showIcon = false;\n        this.expanded = false;\n        this.icon = null;\n        if (url) {\n            this.showIcon = true;\n            this.icon = this.getIcon();\n        }\n    }\n    TreeNode.prototype.expand = function () {\n        this.expanded = !this.expanded;\n        this.icon = this.getIcon();\n    };\n    TreeNode.prototype.getIcon = function () {\n        if (this.showIcon === true) {\n            if (this.expanded) {\n                return '- ';\n            }\n            return '+ ';\n        }\n        return null;\n    };\n    return TreeNode;\n}());\nexport { TreeNode };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/tree-node.ts\n// module id = null\n// module chunks = ","import { TreeNode } from '../tree-node';\nexport var treeNodeReducer = function (state, action) {\n    if (state === void 0) { state = []; }\n    switch (action.name) {\n        case 'LOAD_NODES':\n            return state['nodes'].map(function (n) {\n                return new TreeNode(n.key, n.url, n.name);\n            });\n    }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/redux/tree-node-reducer.ts\n// module id = null\n// module chunks = ","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Http } from '@angular/http';\nimport { treeNodeReducer } from './tree-node-reducer';\nvar Store = (function () {\n    function Store(_http) {\n        var _this = this;\n        this._http = _http;\n        this.dispatcher = new Subject();\n        this.treeNodes = {};\n        this.nodes = {};\n        this.dispatcher.subscribe(function (action) { return _this.handleAction(action); });\n    }\n    Store.prototype.handleAction = function (action) {\n        var _this = this;\n        if (action.name === 'LOAD_NODES') {\n            if (this.nodes[action.key]) {\n                this.treeNodes[action.key].next(this.nodes[action.key]);\n            }\n            else {\n                this._http\n                    .get(action.url)\n                    .map(function (res) { return res.json(); })\n                    .subscribe(function (res) {\n                    _this.nodes[action.key] = treeNodeReducer(res, action);\n                    _this.treeNodes[action.key].next(_this.nodes[action.key]);\n                });\n            }\n        }\n    };\n    Store.prototype.getTreeNodes = function (key) {\n        if (!this.treeNodes.hasOwnProperty(key)) {\n            this.treeNodes[key] = new Subject();\n        }\n        return this.treeNodes[key].asObservable();\n    };\n    Store.prototype.dispatchAction = function (action) {\n        this.dispatcher.next(action);\n    };\n    Store = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [Http])\n    ], Store);\n    return Store;\n}());\nexport { Store };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/redux/store.ts\n// module id = null\n// module chunks = ","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { Store } from './redux/store';\nvar TreeNodeService = (function () {\n    function TreeNodeService(_store) {\n        this._store = _store;\n    }\n    TreeNodeService.prototype.loadTreeNodes = function (root) {\n        if (root.url) {\n            this._store.dispatchAction({ key: root.key, url: root.url, name: 'LOAD_NODES' });\n        }\n    };\n    TreeNodeService = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [Store])\n    ], TreeNodeService);\n    return TreeNodeService;\n}());\nexport { TreeNodeService };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/tree-node-service.ts\n// module id = null\n// module chunks = ","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { TreeNode } from './tree-node';\nimport { Store } from './redux/store';\nimport { TreeNodeService } from './tree-node-service';\nvar CountryDemo = (function () {\n    function CountryDemo() {\n        this.node = null;\n    }\n    CountryDemo.prototype.ngOnInit = function () {\n        this.node = new TreeNode('root', './tree-view-data/countries.json', '');\n    };\n    CountryDemo = __decorate([\n        Component({\n            selector: 'country-demo',\n            template: \"<h1>Lazy loaded TreeView using Redux and RxJs</h1>\\n            <lazy-tree-view [root]=\\\"node\\\"></lazy-tree-view>\",\n            providers: [Store, TreeNodeService]\n        })\n    ], CountryDemo);\n    return CountryDemo;\n}());\nexport { CountryDemo };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/country-demo.ts\n// module id = null\n// module chunks = ","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, Input } from '@angular/core';\nimport { TreeNode } from './tree-node';\nimport { Store } from './redux/store';\nimport { TreeNodeService } from './tree-node-service';\nvar LazyTreeView = (function () {\n    function LazyTreeView(_store, _treeNodeService) {\n        this._store = _store;\n        this._treeNodeService = _treeNodeService;\n        this.items = [];\n    }\n    LazyTreeView.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this._store.getTreeNodes(this.root.key).subscribe(function (res) {\n            _this.items = res;\n        });\n        this._treeNodeService.loadTreeNodes(this.root);\n    };\n    LazyTreeView.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", TreeNode)\n    ], LazyTreeView.prototype, \"root\", void 0);\n    LazyTreeView = __decorate([\n        Component({\n            template: \"\\n  <ul>\\n  <li *ngFor=\\\"let node of items\\\">\\n\\n    <span class=\\\"iconButton\\\" [ngClass]='{\\\"tree-node-no-children\\\": !node.showIcon}' (click)=\\\"node.expand()\\\">{{node.icon}}</span>\\n    <span>{{ node.name }}</span>\\n\\n    <div *ngIf=\\\"node.expanded\\\">\\n      <lazy-tree-view [root]=\\\"node\\\"></lazy-tree-view>\\n    </div>\\n  </li>\\n  </ul>\\n\",\n            selector: 'lazy-tree-view'\n        }),\n        __metadata(\"design:paramtypes\", [Store, TreeNodeService])\n    ], LazyTreeView);\n    return LazyTreeView;\n}());\nexport { LazyTreeView };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/lazy-loaded-tree-view/tree-view.ts\n// module id = null\n// module chunks = ","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { HttpModule } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { CountryDemo } from '../../components/lazy-loaded-tree-view/country-demo';\nimport { LazyTreeView } from '../../components/lazy-loaded-tree-view/tree-view';\nvar LazyTreeviewModule = (function () {\n    function LazyTreeviewModule() {\n    }\n    LazyTreeviewModule = __decorate([\n        NgModule({\n            declarations: [CountryDemo, LazyTreeView],\n            imports: [\n                CommonModule,\n                HttpModule,\n                RouterModule.forChild([\n                    { path: '', component: CountryDemo }\n                ])\n            ]\n        })\n    ], LazyTreeviewModule);\n    return LazyTreeviewModule;\n}());\nexport { LazyTreeviewModule };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app-lazy/lazy-modules/lazy-loaded-treeview.module.ts\n// module id = null\n// module chunks = ","import * as i0 from \"@angular/core\";\nimport * as i1 from \"./lazy-loaded-treeview.module\";\nimport * as i2 from \"../../components/lazy-loaded-tree-view/country-demo.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/http\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../../components/lazy-loaded-tree-view/country-demo\";\nvar LazyTreeviewModuleNgFactory = i0.ɵcmf(i1.LazyTreeviewModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.CountryDemoNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵa]]), i0.ɵmpd(4608, i4.BrowserXhr, i4.BrowserXhr, []), i0.ɵmpd(4608, i4.ResponseOptions, i4.BaseResponseOptions, []), i0.ɵmpd(5120, i4.XSRFStrategy, i4.ɵa, []), i0.ɵmpd(4608, i4.XHRBackend, i4.XHRBackend, [i4.BrowserXhr, i4.ResponseOptions, i4.XSRFStrategy]), i0.ɵmpd(4608, i4.RequestOptions, i4.BaseRequestOptions, []), i0.ɵmpd(5120, i4.Http, i4.ɵb, [i4.XHRBackend, i4.RequestOptions]), i0.ɵmpd(512, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(512, i4.HttpModule, i4.HttpModule, []), i0.ɵmpd(512, i5.RouterModule, i5.RouterModule, [[2, i5.ɵa], [2, i5.Router]]), i0.ɵmpd(512, i1.LazyTreeviewModule, i1.LazyTreeviewModule, []), i0.ɵmpd(1024, i5.ROUTES, function () { return [[{ path: \"\", component: i6.CountryDemo }]]; }, [])]); });\nexport { LazyTreeviewModuleNgFactory as LazyTreeviewModuleNgFactory };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app-lazy/lazy-modules/lazy-loaded-treeview.module.ngfactory.js\n// module id = null\n// module chunks = ","/**\n * @license Angular v5.0.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { Observable } from 'rxjs/Observable';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n/** @enum {number} */\nvar ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n/** @enum {number} */\nvar ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n/** @enum {number} */\nvar ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n/** @enum {number} */\nvar ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Headers = (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var /** @type {?} */ values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name_1 = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    Headers.prototype.toJSON = /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[/** @type {?} */ ((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar ResponseOptions = (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseResponseOptions = (function (_super) {\n    __extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * Required structure when constructing new Request();\n * @record\n */\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar URLSearchParams = (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return /** @type {?} */ (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof Blob) {\n            return /** @type {?} */ (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Response = (function (_super) {\n    __extends(Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = /** @type {?} */ ((responseOptions.status));\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = /** @type {?} */ ((responseOptions.type));\n        _this.url = /** @type {?} */ ((responseOptions.url));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = /**\n     * @return {?}\n     */\n    function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPConnection = (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var /** @type {?} */ id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var /** @type {?} */ callback = _dom.requestCallback(_this._id);\n            var /** @type {?} */ url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var /** @type {?} */ script = _this._script = _dom.build(url);\n            var /** @type {?} */ onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var /** @type {?} */ responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var /** @type {?} */ onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPBackend = (function (_super) {\n    __extends(JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRConnection = (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            var /** @type {?} */ _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var /** @type {?} */ onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var /** @type {?} */ status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var /** @type {?} */ body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var /** @type {?} */ headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n                var /** @type {?} */ statusText = _xhr.statusText || 'OK';\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var /** @type {?} */ response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var /** @type {?} */ onError = function (err) {\n                var /** @type {?} */ responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar CookieXSRFStrategy = (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var /** @type {?} */ xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRBackend = (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar RequestOptions = (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = /**\n     * @param {?=} params\n     * @return {?}\n     */\n    function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseRequestOptions = (function (_super) {\n    __extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Request = (function (_super) {\n    __extends(Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var /** @type {?} */ url = requestOptions.url;\n        _this.url = /** @type {?} */ ((requestOptions.url));\n        var /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var /** @type {?} */ params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var /** @type {?} */ prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = /** @type {?} */ ((requestOptions.withCredentials));\n        _this.responseType = /** @type {?} */ ((requestOptions.responseType));\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return /** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return /** @type {?} */ (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Http = (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar Jsonp = (function (_super) {\n    __extends(Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar VERSION = new Version('5.0.0');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as ɵe, Body as ɵf, _createDefaultCookieXSRFStrategy as ɵa, httpFactory as ɵb, jsonpFactory as ɵc };\n//# sourceMappingURL=http.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/http/esm5/http.js\n// module id = 95\n// module chunks = 3 8","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/map.js\n// module id = 96\n// module chunks = 0 1 3 4 8"],"sourceRoot":""}