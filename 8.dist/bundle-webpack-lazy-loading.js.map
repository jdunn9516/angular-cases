{"version":3,"sources":["webpack:///8.dist/bundle-webpack-lazy-loading.js","webpack:///./app-lazy/aot/components/lazy-loaded-tree-view/tree-view.ngfactory.ts","webpack:///./app-lazy/aot/components/lazy-loaded-tree-view/country-demo.ngfactory.ts","webpack:///./app-lazy/lazy-modules/lazy-loaded-treeview.module.ts","webpack:///./components/lazy-loaded-tree-view/tree-node.ts","webpack:///./components/lazy-loaded-tree-view/redux/tree-node-reducer.ts","webpack:///./components/lazy-loaded-tree-view/redux/store.ts","webpack:///./components/lazy-loaded-tree-view/tree-node-service.ts","webpack:///./components/lazy-loaded-tree-view/tree-view.ts","webpack:///./components/lazy-loaded-tree-view/country-demo.ts","webpack:///./app-lazy/aot/app-lazy/lazy-modules/lazy-loaded-treeview.module.ngfactory.ts","webpack:///./node_modules/rxjs/add/operator/map.js?fa96***","webpack:///./node_modules/@angular/http/esm5/http.js?34ea"],"names":["webpackJsonp","63","module","__webpack_exports__","__webpack_require__","View_LazyTreeView_2","_l","__WEBPACK_IMPORTED_MODULE_0__angular_core__","View_LazyTreeView_0","RenderType_LazyTreeView","tree_view_LazyTreeView","store_Store","tree_node_service_TreeNodeService","root","_ck","_v","parent","context","$implicit","View_LazyTreeView_1","en","$event","ad","expand","__WEBPACK_IMPORTED_MODULE_4__angular_common__","klass","ngClass","tree-node-no-children","ngIf","showIcon","expanded","icon","name","ngForOf","component","items","View_LazyTreeView_Host_0","View_CountryDemo_0","country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__","node","View_CountryDemo_Host_0","RenderType_CountryDemo","__WEBPACK_IMPORTED_MODULE_6__angular_http__","country_demo_CountryDemo","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_rxjs_add_operator_map__","LazyTreeviewModule","n","TreeNode","key","url","this","getIcon","prototype","treeNodeReducer","state","action","map","__WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__","__WEBPACK_IMPORTED_MODULE_1__angular_http__","Store","_http","_this","dispatcher","treeNodes","nodes","subscribe","handleAction","next","get","res","json","getTreeNodes","hasOwnProperty","asObservable","dispatchAction","ctorParameters","type","TreeNodeService","_store","loadTreeNodes","LazyTreeView","_treeNodeService","ngOnInit","subscription","ngOnDestroy","unsubscribe","styles_LazyTreeView","encapsulation","styles","data","CountryDemo","styles_CountryDemo","CountryDemoNgFactory","d","LazyTreeviewModuleNgFactory","lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_3__angular_common__","__WEBPACK_IMPORTED_MODULE_4__angular_http__","__WEBPACK_IMPORTED_MODULE_5__angular_router__","path","74","exports","Observable_1","map_1","Observable","77","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","Error","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","length","i","strLen","charCodeAt","buffer","paramParser","rawParams","Map","split","forEach","param","eqIdx","indexOf","_a","slice","val","list","push","set","standardEncoding","v","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","urlEncodeParams","params","searchParams","URLSearchParams","keys","Array","isArray","element","append","toString","httpRequest","backend","request","createConnection","response","mergeOptions","defaultOpts","providedOpts","newOptions","merge","RequestOptions","search","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","Jsonp","BrowserXhr","XHRBackend","BaseRequestOptions","BaseResponseOptions","ResponseOptions","HttpModule","XSRFStrategy","__WEBPACK_IMPORTED_MODULE_1_tslib__","__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__","__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__","build","XMLHttpRequest","decorators","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","_headers","_normalizedNames","values","delete","fromResponseHeaderString","headersString","line","index","name_1","trim","getAll","lcName","toLowerCase","fn","has","from","join","mayBeSetNormalizedName","toJSON","serialized","apply","entries","opts","status","statusText","options","_super","call","ConnectionBackend","Connection","isSuccess","QueryEncoder","encodeKey","k","encodeValue","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","replaceAll","paramsList","Body","_body","parse","text","encodingHint","String","fromCharCode","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","BrowserJsonp","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","responseOptions_1","error","_responseData","complete","onError","message","addEventListener","removeEventListener","finished","JSONPBackend","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","getBody","abort","contentType","_cookieName","_headerName","configureRequest","xsrfToken","getCookie","_browserXHR","_xsrfStrategy","_mergeSearchParams","enumerable","configurable","_parseParams","objParams","item","_appendParam","Request","paramsArg","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","noop","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","args","providers","provide","useFactory","deps","useClass","JsonpModule"],"mappings":"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","file":"8.dist/bundle-webpack-lazy-loading.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 63:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./app-lazy/lazy-modules/lazy-loaded-treeview.module.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_add_operator_map__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_rxjs_add_operator_map__);\n\nvar LazyTreeviewModule = (function () {\n    function LazyTreeviewModule() {\n    }\n    return LazyTreeviewModule;\n}());\n\n//# sourceMappingURL=lazy-loaded-treeview.module.js.map\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/tree-node.ts\nvar TreeNode = (function () {\n    function TreeNode(key, url, name) {\n        this.key = key;\n        this.url = url;\n        this.name = name;\n        this.showIcon = false;\n        this.expanded = false;\n        this.icon = null;\n        if (url) {\n            this.showIcon = true;\n            this.icon = this.getIcon();\n        }\n    }\n    TreeNode.prototype.expand = function () {\n        this.expanded = !this.expanded;\n        this.icon = this.getIcon();\n    };\n    TreeNode.prototype.getIcon = function () {\n        if (this.showIcon === true) {\n            if (this.expanded) {\n                return '- ';\n            }\n            return '+ ';\n        }\n        return null;\n    };\n    return TreeNode;\n}());\n\n//# sourceMappingURL=tree-node.js.map\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/redux/tree-node-reducer.ts\n\nvar treeNodeReducer = function (state, action) {\n    if (state === void 0) { state = []; }\n    switch (action.name) {\n        case 'LOAD_NODES':\n            return state['nodes'].map(function (n) {\n                return new TreeNode(n.key, n.url, n.name);\n            });\n    }\n};\n//# sourceMappingURL=tree-node-reducer.js.map\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/redux/store.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(77);\n\n\n\nvar store_Store = (function () {\n    function Store(_http) {\n        var _this = this;\n        this._http = _http;\n        this.dispatcher = new __WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__[\"Subject\"]();\n        this.treeNodes = {};\n        this.nodes = {};\n        this.dispatcher.subscribe(function (action) { return _this.handleAction(action); });\n    }\n    Store.prototype.handleAction = function (action) {\n        var _this = this;\n        if (action.name === 'LOAD_NODES') {\n            if (this.nodes[action.key]) {\n                this.treeNodes[action.key].next(this.nodes[action.key]);\n            }\n            else {\n                this._http\n                    .get(action.url)\n                    .map(function (res) { return res.json(); })\n                    .subscribe(function (res) {\n                    _this.nodes[action.key] = treeNodeReducer(res, action);\n                    _this.treeNodes[action.key].next(_this.nodes[action.key]);\n                });\n            }\n        }\n    };\n    Store.prototype.getTreeNodes = function (key) {\n        if (!this.treeNodes.hasOwnProperty(key)) {\n            this.treeNodes[key] = new __WEBPACK_IMPORTED_MODULE_0_rxjs_Subject__[\"Subject\"]();\n        }\n        return this.treeNodes[key].asObservable();\n    };\n    Store.prototype.dispatchAction = function (action) {\n        this.dispatcher.next(action);\n    };\n    Store.ctorParameters = function () { return [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_http__[\"d\" /* Http */] }]; };\n    return Store;\n}());\n\n//# sourceMappingURL=store.js.map\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/tree-node-service.ts\n\nvar tree_node_service_TreeNodeService = (function () {\n    function TreeNodeService(_store) {\n        this._store = _store;\n    }\n    TreeNodeService.prototype.loadTreeNodes = function (root) {\n        if (root.url) {\n            this._store.dispatchAction({ key: root.key, url: root.url, name: 'LOAD_NODES' });\n        }\n    };\n    TreeNodeService.ctorParameters = function () { return [{ type: store_Store }]; };\n    return TreeNodeService;\n}());\n\n//# sourceMappingURL=tree-node-service.js.map\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/tree-view.ts\n\n\nvar tree_view_LazyTreeView = (function () {\n    function LazyTreeView(_store, _treeNodeService) {\n        this._store = _store;\n        this._treeNodeService = _treeNodeService;\n        this.items = [];\n    }\n    LazyTreeView.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this._store.getTreeNodes(this.root.key).subscribe(function (res) {\n            _this.items = res;\n        });\n        this._treeNodeService.loadTreeNodes(this.root);\n    };\n    LazyTreeView.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n    };\n    LazyTreeView.ctorParameters = function () { return [{ type: store_Store }, { type: tree_node_service_TreeNodeService }]; };\n    return LazyTreeView;\n}());\n\n//# sourceMappingURL=tree-view.js.map\n// CONCATENATED MODULE: ./app-lazy/aot/components/lazy-loaded-tree-view/tree-view.ngfactory.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_common__ = __webpack_require__(4);\n\n\n\n\n\nvar styles_LazyTreeView = [];\nvar RenderType_LazyTreeView = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_13\" /* ɵcrt */]({ encapsulation: 2, styles: styles_LazyTreeView,\n    data: {} });\nfunction View_LazyTreeView_2(_l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵvid */](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, 0, null, null, 2, 'div', [], null, null, null, null, null)), (_l()(),\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](1, 0, null, null, 1, 'lazy-tree-view', [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)),\n        __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵdid */](2, 245760, null, 0, tree_view_LazyTreeView, [store_Store, tree_node_service_TreeNodeService], { root: [0, 'root'] }, null)], function (_ck, _v) {\n        var currVal_0 = _v.parent.context.$implicit;\n        _ck(_v, 2, 0, currVal_0);\n    }, null);\n}\nfunction View_LazyTreeView_1(_l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵvid */](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, 0, null, null, 8, 'li', [], null, null, null, null, null)), (_l()(),\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](1, 0, null, null, 3, 'span', [['class', 'iconButton']], null, [[null, 'click']], function (_v, en, $event) {\n                var ad = true;\n                if (('click' === en)) {\n                    var pd_0 = (_v.context.$implicit.expand() !== false);\n                    ad = (pd_0 && ad);\n                }\n                return ad;\n            }, null, null)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵdid */](2, 278528, null, 0, __WEBPACK_IMPORTED_MODULE_4__angular_common__[\"i\" /* NgClass */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"y\" /* IterableDiffers */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"z\" /* KeyValueDiffers */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"n\" /* ElementRef */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"M\" /* Renderer2 */]], { klass: [0,\n                'klass'], ngClass: [1, 'ngClass'] }, null), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_31\" /* ɵpod */](3, { 'tree-node-no-children': 0 }),\n        (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_35\" /* ɵted */](4, null, ['', ''])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](5, 0, null, null, 1, 'span', [], null, null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_35\" /* ɵted */](6, null, ['', ''])),\n        (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_10\" /* ɵand */](16777216, null, null, 1, null, View_LazyTreeView_2)),\n        __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵdid */](8, 16384, null, 0, __WEBPACK_IMPORTED_MODULE_4__angular_common__[\"k\" /* NgIf */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Y\" /* ViewContainerRef */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"V\" /* TemplateRef */]], { ngIf: [0, 'ngIf'] }, null)], function (_ck, _v) {\n        var currVal_0 = 'iconButton';\n        var currVal_1 = _ck(_v, 3, 0, !_v.context.$implicit.showIcon);\n        _ck(_v, 2, 0, currVal_0, currVal_1);\n        var currVal_4 = _v.context.$implicit.expanded;\n        _ck(_v, 8, 0, currVal_4);\n    }, function (_ck, _v) {\n        var currVal_2 = _v.context.$implicit.icon;\n        _ck(_v, 4, 0, currVal_2);\n        var currVal_3 = _v.context.$implicit.name;\n        _ck(_v, 6, 0, currVal_3);\n    });\n}\nfunction View_LazyTreeView_0(_l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵvid */](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, 0, null, null, 2, 'ul', [], null, null, null, null, null)), (_l()(),\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_10\" /* ɵand */](16777216, null, null, 1, null, View_LazyTreeView_1)),\n        __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵdid */](2, 802816, null, 0, __WEBPACK_IMPORTED_MODULE_4__angular_common__[\"j\" /* NgForOf */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Y\" /* ViewContainerRef */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"V\" /* TemplateRef */],\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"y\" /* IterableDiffers */]], { ngForOf: [0, 'ngForOf'] }, null)], function (_ck, _v) {\n        var _co = _v.component;\n        var currVal_0 = _co.items;\n        _ck(_v, 2, 0, currVal_0);\n    }, null);\n}\nfunction View_LazyTreeView_Host_0(_l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵvid */](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, 0, null, null, 1, 'lazy-tree-view', [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵdid */](1, 245760, null, 0, tree_view_LazyTreeView, [store_Store,\n            tree_node_service_TreeNodeService], null, null)], function (_ck, _v) {\n        _ck(_v, 1, 0);\n    }, null);\n}\nvar LazyTreeViewNgFactory = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_11\" /* ɵccf */]('lazy-tree-view', tree_view_LazyTreeView, View_LazyTreeView_Host_0, { root: 'root' }, {}, []);\n//# sourceMappingURL=tree-view.ngfactory.js.map\n// CONCATENATED MODULE: ./components/lazy-loaded-tree-view/country-demo.ts\n\nvar country_demo_CountryDemo = (function () {\n    function CountryDemo() {\n        this.node = null;\n    }\n    CountryDemo.prototype.ngOnInit = function () {\n        this.node = new TreeNode('root', './tree-view-data/countries.json', '');\n    };\n    return CountryDemo;\n}());\n\n//# sourceMappingURL=country-demo.js.map\n// CONCATENATED MODULE: ./app-lazy/aot/components/lazy-loaded-tree-view/country-demo.ngfactory.ts\n/* harmony import */ var country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_http__ = __webpack_require__(77);\n\n\n\n\n\n\n\nvar styles_CountryDemo = [];\nvar RenderType_CountryDemo = country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_13\" /* ɵcrt */]({ encapsulation: 2, styles: styles_CountryDemo,\n    data: {} });\nfunction View_CountryDemo_0(_l) {\n    return country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵvid */](0, [(_l()(), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, 0, null, null, 1, 'h1', [], null, null, null, null, null)), (_l()(),\n            country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_35\" /* ɵted */](-1, null, ['Lazy loaded TreeView using Redux and RxJs'])), (_l()(),\n            country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](2, 0, null, null, 1, 'lazy-tree-view', [], null, null, null, View_LazyTreeView_0, RenderType_LazyTreeView)),\n        country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵdid */](3, 245760, null, 0, tree_view_LazyTreeView, [store_Store, tree_node_service_TreeNodeService], { root: [0, 'root'] }, null)], function (_ck, _v) {\n        var _co = _v.component;\n        var currVal_0 = _co.node;\n        _ck(_v, 3, 0, currVal_0);\n    }, null);\n}\nfunction View_CountryDemo_Host_0(_l) {\n    return country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_37\" /* ɵvid */](0, [(_l()(), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, 0, null, null, 3, 'country-demo', [], null, null, null, View_CountryDemo_0, RenderType_CountryDemo)),\n        country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_32\" /* ɵprd */](4608, null, store_Store, store_Store, [__WEBPACK_IMPORTED_MODULE_6__angular_http__[\"d\" /* Http */]]), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_32\" /* ɵprd */](4608, null, tree_node_service_TreeNodeService, tree_node_service_TreeNodeService, [store_Store]), country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵdid */](3, 114688, null, 0, country_demo_CountryDemo, [], null, null)], function (_ck, _v) {\n        _ck(_v, 3, 0);\n    }, null);\n}\nvar CountryDemoNgFactory = country_demo_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_11\" /* ɵccf */]('country-demo', country_demo_CountryDemo, View_CountryDemo_Host_0, {}, {}, []);\n//# sourceMappingURL=country-demo.ngfactory.js.map\n// CONCATENATED MODULE: ./app-lazy/aot/app-lazy/lazy-modules/lazy-loaded-treeview.module.ngfactory.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LazyTreeviewModuleNgFactory\", function() { return LazyTreeviewModuleNgFactory; });\n/* harmony import */ var lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_common__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_http__ = __webpack_require__(77);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(17);\n\n\n\n\n\n\n\nvar LazyTreeviewModuleNgFactory = lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_12\" /* ɵcmf */](LazyTreeviewModule, [], function (_l) {\n    return lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_26\" /* ɵmod */]([lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](512, lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"k\" /* ComponentFactoryResolver */], lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_8\" /* ɵCodegenComponentFactoryResolver */], [[8, [CountryDemoNgFactory]], [3, lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"k\" /* ComponentFactoryResolver */]], lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"E\" /* NgModuleRef */]]),\n        lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"m\" /* NgLocalization */], __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"l\" /* NgLocaleLocalization */], [lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"A\" /* LOCALE_ID */], [2,\n                __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"t\" /* ɵa */]]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"c\" /* BrowserXhr */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"c\" /* BrowserXhr */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"g\" /* ResponseOptions */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"b\" /* BaseResponseOptions */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](5120, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"i\" /* XSRFStrategy */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"j\" /* ɵa */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"h\" /* XHRBackend */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"h\" /* XHRBackend */], [__WEBPACK_IMPORTED_MODULE_4__angular_http__[\"c\" /* BrowserXhr */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"g\" /* ResponseOptions */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"i\" /* XSRFStrategy */]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"f\" /* RequestOptions */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"a\" /* BaseRequestOptions */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](5120, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"d\" /* Http */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"k\" /* ɵb */], [__WEBPACK_IMPORTED_MODULE_4__angular_http__[\"h\" /* XHRBackend */],\n            __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"f\" /* RequestOptions */]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"c\" /* CommonModule */], __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"c\" /* CommonModule */], []),\n        lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"e\" /* HttpModule */], __WEBPACK_IMPORTED_MODULE_4__angular_http__[\"e\" /* HttpModule */], []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"m\" /* RouterModule */], __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"m\" /* RouterModule */], [[2, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"r\" /* ɵa */]], [2, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"k\" /* Router */]]]), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](512, LazyTreeviewModule, LazyTreeviewModule, []), lazy_loaded_treeview_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmpd */](1024, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"i\" /* ROUTES */], function () {\n            return [[{ path: '', component: country_demo_CountryDemo }]];\n        }, [])]);\n});\n//# sourceMappingURL=lazy-loaded-treeview.module.ngfactory.js.map\n\n/***/ }),\n\n/***/ 74:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(0);\nvar map_1 = __webpack_require__(33);\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n/***/ }),\n\n/***/ 77:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return BrowserXhr; });\n/* unused harmony export JSONPBackend */\n/* unused harmony export JSONPConnection */\n/* unused harmony export CookieXSRFStrategy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return XHRBackend; });\n/* unused harmony export XHRConnection */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseRequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return RequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BaseResponseOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return ResponseOptions; });\n/* unused harmony export ReadyState */\n/* unused harmony export RequestMethod */\n/* unused harmony export ResponseContentType */\n/* unused harmony export ResponseType */\n/* unused harmony export Headers */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return Http; });\n/* unused harmony export Jsonp */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return HttpModule; });\n/* unused harmony export JsonpModule */\n/* unused harmony export Connection */\n/* unused harmony export ConnectionBackend */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return XSRFStrategy; });\n/* unused harmony export Request */\n/* unused harmony export Response */\n/* unused harmony export QueryEncoder */\n/* unused harmony export URLSearchParams */\n/* unused harmony export VERSION */\n/* unused harmony export ɵe */\n/* unused harmony export ɵf */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return _createDefaultCookieXSRFStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return httpFactory; });\n/* unused harmony export ɵc */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tslib__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(8);\n/**\n * @license Angular v5.0.0-rc.2\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n/** @enum {number} */\nvar ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n/** @enum {number} */\nvar ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n/** @enum {number} */\nvar ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n/** @enum {number} */\nvar ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Headers = (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var /** @type {?} */ values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name_1 = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    Headers.prototype.toJSON = /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[/** @type {?} */ ((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar ResponseOptions = (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseResponseOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * Required structure when constructing new Request();\n * @record\n */\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar URLSearchParams = (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return /** @type {?} */ (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof Blob) {\n            return /** @type {?} */ (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Response = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = /** @type {?} */ ((responseOptions.status));\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = /** @type {?} */ ((responseOptions.type));\n        _this.url = /** @type {?} */ ((responseOptions.url));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = /**\n     * @return {?}\n     */\n    function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPConnection = (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var /** @type {?} */ id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var /** @type {?} */ callback = _dom.requestCallback(_this._id);\n            var /** @type {?} */ url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var /** @type {?} */ script = _this._script = _dom.build(url);\n            var /** @type {?} */ onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var /** @type {?} */ responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var /** @type {?} */ onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPBackend = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRConnection = (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            var /** @type {?} */ _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var /** @type {?} */ onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var /** @type {?} */ status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var /** @type {?} */ body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var /** @type {?} */ headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n                var /** @type {?} */ statusText = _xhr.statusText || 'OK';\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var /** @type {?} */ response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var /** @type {?} */ onError = function (err) {\n                var /** @type {?} */ responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar CookieXSRFStrategy = (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var /** @type {?} */ xsrfToken = __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__[\"r\" /* ɵgetDOM */]().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRBackend = (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar RequestOptions = (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = /**\n     * @param {?=} params\n     * @return {?}\n     */\n    function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseRequestOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Request = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var /** @type {?} */ url = requestOptions.url;\n        _this.url = /** @type {?} */ ((requestOptions.url));\n        var /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var /** @type {?} */ params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var /** @type {?} */ prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = /** @type {?} */ ((requestOptions.withCredentials));\n        _this.responseType = /** @type {?} */ ((requestOptions.responseType));\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return /** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return /** @type {?} */ (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Http = (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar Jsonp = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_1_tslib__[\"b\" /* __extends */](Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"u\" /* Injectable */] },\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"B\" /* NgModule */], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"B\" /* NgModule */], args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"X\" /* Version */]('5.0.0-rc.2');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=http.js.map\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 8.dist/bundle-webpack-lazy-loading.js","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as i0 from '@angular/core';\nimport * as i1 from '../../../../components/lazy-loaded-tree-view/tree-view';\nimport * as i2 from '../../../../components/lazy-loaded-tree-view/redux/store';\nimport * as i3 from '../../../../components/lazy-loaded-tree-view/tree-node-service';\nimport * as i4 from '@angular/common';\nconst styles_LazyTreeView:any[] = ([] as any[]);\nexport const RenderType_LazyTreeView:i0.RendererType2 = i0.ɵcrt({encapsulation:2,styles:styles_LazyTreeView,\n    data:{}});\nfunction View_LazyTreeView_2(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,0,(null as any),(null as any),2,'div',([] as any[]),\n      (null as any),(null as any),(null as any),(null as any),(null as any))),(_l()(),\n      i0.ɵeld(1,0,(null as any),(null as any),1,'lazy-tree-view',([] as any[]),(null as any),\n          (null as any),(null as any),View_LazyTreeView_0,RenderType_LazyTreeView)),\n      i0.ɵdid(2,245760,(null as any),0,i1.LazyTreeView,[i2.Store,i3.TreeNodeService],\n          {root:[0,'root']},(null as any))],(_ck,_v) => {\n    const currVal_0:any = (<any>_v.parent).context.$implicit;\n    _ck(_v,2,0,currVal_0);\n  },(null as any));\n}\nfunction View_LazyTreeView_1(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,0,(null as any),(null as any),8,'li',([] as any[]),\n      (null as any),(null as any),(null as any),(null as any),(null as any))),(_l()(),\n      i0.ɵeld(1,0,(null as any),(null as any),3,'span',[['class','iconButton']],(null as any),\n          [[(null as any),'click']],(_v,en,$event) => {\n            var ad:boolean = true;\n            if (('click' === en)) {\n              const pd_0:any = ((<any>_v.context.$implicit.expand()) !== false);\n              ad = (pd_0 && ad);\n            }\n            return ad;\n          },(null as any),(null as any))),i0.ɵdid(2,278528,(null as any),0,i4.NgClass,\n      [i0.IterableDiffers,i0.KeyValueDiffers,i0.ElementRef,i0.Renderer2],{klass:[0,\n          'klass'],ngClass:[1,'ngClass']},(null as any)),i0.ɵpod(3,{'tree-node-no-children':0}),\n      (_l()(),i0.ɵted(4,(null as any),['',''])),(_l()(),i0.ɵeld(5,0,(null as any),\n          (null as any),1,'span',([] as any[]),(null as any),(null as any),(null as any),\n          (null as any),(null as any))),(_l()(),i0.ɵted(6,(null as any),['',''])),\n      (_l()(),i0.ɵand(16777216,(null as any),(null as any),1,(null as any),View_LazyTreeView_2)),\n      i0.ɵdid(8,16384,(null as any),0,i4.NgIf,[i0.ViewContainerRef,i0.TemplateRef],\n          {ngIf:[0,'ngIf']},(null as any))],(_ck,_v) => {\n    const currVal_0:any = 'iconButton';\n    const currVal_1:any = _ck(_v,3,0,!_v.context.$implicit.showIcon);\n    _ck(_v,2,0,currVal_0,currVal_1);\n    const currVal_4:any = _v.context.$implicit.expanded;\n    _ck(_v,8,0,currVal_4);\n  },(_ck,_v) => {\n    const currVal_2:any = _v.context.$implicit.icon;\n    _ck(_v,4,0,currVal_2);\n    const currVal_3:any = _v.context.$implicit.name;\n    _ck(_v,6,0,currVal_3);\n  });\n}\nexport function View_LazyTreeView_0(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,0,(null as any),(null as any),2,'ul',([] as any[]),\n      (null as any),(null as any),(null as any),(null as any),(null as any))),(_l()(),\n      i0.ɵand(16777216,(null as any),(null as any),1,(null as any),View_LazyTreeView_1)),\n      i0.ɵdid(2,802816,(null as any),0,i4.NgForOf,[i0.ViewContainerRef,i0.TemplateRef,\n          i0.IterableDiffers],{ngForOf:[0,'ngForOf']},(null as any))],(_ck,_v) => {\n    var _co:i1.LazyTreeView = _v.component;\n    const currVal_0:any = _co.items;\n    _ck(_v,2,0,currVal_0);\n  },(null as any));\n}\nexport function View_LazyTreeView_Host_0(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,0,(null as any),(null as any),1,'lazy-tree-view',\n      ([] as any[]),(null as any),(null as any),(null as any),View_LazyTreeView_0,\n      RenderType_LazyTreeView)),i0.ɵdid(1,245760,(null as any),0,i1.LazyTreeView,[i2.Store,\n      i3.TreeNodeService],(null as any),(null as any))],(_ck,_v) => {\n    _ck(_v,1,0);\n  },(null as any));\n}\nexport const LazyTreeViewNgFactory:i0.ComponentFactory<i1.LazyTreeView> = i0.ɵccf('lazy-tree-view',\n    i1.LazyTreeView,View_LazyTreeView_Host_0,{root:'root'},{},([] as any[]));\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL3RvcmdlaXJoZWxnZXZvbGQvZGV2ZWxvcG1lbnQvYW5ndWxhci0yLXNhbXBsZXMvY29tcG9uZW50cy9sYXp5LWxvYWRlZC10cmVlLXZpZXcvdHJlZS12aWV3Lm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy90b3JnZWlyaGVsZ2V2b2xkL2RldmVsb3BtZW50L2FuZ3VsYXItMi1zYW1wbGVzL2NvbXBvbmVudHMvbGF6eS1sb2FkZWQtdHJlZS12aWV3L3RyZWUtdmlldy5uZ2ZhY3RvcnkudHMiLCIvVXNlcnMvdG9yZ2VpcmhlbGdldm9sZC9kZXZlbG9wbWVudC9hbmd1bGFyLTItc2FtcGxlcy9jb21wb25lbnRzL2xhenktbG9hZGVkLXRyZWUtdmlldy90cmVlLXZpZXcudHMuTGF6eVRyZWVWaWV3Lmh0bWwiLCIiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIlxuICA8dWw+XG4gIDxsaSAqbmdGb3I9XCJsZXQgbm9kZSBvZiBpdGVtc1wiPlxuXG4gICAgPHNwYW4gY2xhc3M9XCJpY29uQnV0dG9uXCIgW25nQ2xhc3NdPSd7XCJ0cmVlLW5vZGUtbm8tY2hpbGRyZW5cIjogIW5vZGUuc2hvd0ljb259JyAoY2xpY2spPVwibm9kZS5leHBhbmQoKVwiPnt7bm9kZS5pY29ufX08L3NwYW4+XG4gICAgPHNwYW4+e3sgbm9kZS5uYW1lIH19PC9zcGFuPlxuXG4gICAgPGRpdiAqbmdJZj1cIm5vZGUuZXhwYW5kZWRcIj5cbiAgICAgIDxsYXp5LXRyZWUtdmlldyBbcm9vdF09XCJub2RlXCI+PC9sYXp5LXRyZWUtdmlldz5cbiAgICA8L2Rpdj5cbiAgPC9saT5cbiAgPC91bD5cbiIsIjxsYXp5LXRyZWUtdmlldz48L2xhenktdHJlZS12aWV3PiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQ09JO01BQUEsd0VBQ0U7YUFBQTtVQUFBO2FBQUE7VUFBQTtJQUFnQjtJQUFoQixXQUFnQixTQUFoQjs7OztvQkFOSjtNQUFBLHdFQUVFO2FBQUE7VUFBQTtZQUFBO1lBQStFO2NBQUE7Y0FBQTtZQUFBO1lBQS9FO1VBQUEsdUNBQUE7TUFBQTtVQUFBLHNEQUF5QjtNQUE4RSwwQ0FDdkc7VUFBQTtVQUFBLDhCQUFNO01BRU47YUFBQTtVQUFBO0lBSE07SUFBbUI7SUFBekIsV0FBTSxVQUFtQixTQUF6QjtJQUdLO0lBQUwsV0FBSyxTQUFMOztJQUh1RztJQUFBO0lBQ2pHO0lBQUE7Ozs7b0JBSlI7TUFBQSx3RUFDQTthQUFBO2FBQUE7NEJBQUE7O0lBQUk7SUFBSixXQUFJLFNBQUo7Ozs7b0JDRkY7TUFBQTs2QkFBQSxVQUFBO3dCQUFBO0lBQUE7Ozs7In0=\n\n\n\n// WEBPACK FOOTER //\n// ./app-lazy/aot/components/lazy-loaded-tree-view/tree-view.ngfactory.ts","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as i0 from '@angular/core';\nimport * as i1 from './tree-view.ngfactory';\nimport * as i2 from '../../../../components/lazy-loaded-tree-view/tree-view';\nimport * as i3 from '../../../../components/lazy-loaded-tree-view/redux/store';\nimport * as i4 from '../../../../components/lazy-loaded-tree-view/tree-node-service';\nimport * as i5 from '../../../../components/lazy-loaded-tree-view/country-demo';\nimport * as i6 from '@angular/http';\nconst styles_CountryDemo:any[] = ([] as any[]);\nexport const RenderType_CountryDemo:i0.RendererType2 = i0.ɵcrt({encapsulation:2,styles:styles_CountryDemo,\n    data:{}});\nexport function View_CountryDemo_0(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,0,(null as any),(null as any),1,'h1',([] as any[]),\n      (null as any),(null as any),(null as any),(null as any),(null as any))),(_l()(),\n      i0.ɵted(-1,(null as any),['Lazy loaded TreeView using Redux and RxJs'])),(_l()(),\n      i0.ɵeld(2,0,(null as any),(null as any),1,'lazy-tree-view',([] as any[]),(null as any),\n          (null as any),(null as any),i1.View_LazyTreeView_0,i1.RenderType_LazyTreeView)),\n      i0.ɵdid(3,245760,(null as any),0,i2.LazyTreeView,[i3.Store,i4.TreeNodeService],\n          {root:[0,'root']},(null as any))],(_ck,_v) => {\n    var _co:i5.CountryDemo = _v.component;\n    const currVal_0:any = _co.node;\n    _ck(_v,3,0,currVal_0);\n  },(null as any));\n}\nexport function View_CountryDemo_Host_0(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,0,(null as any),(null as any),3,'country-demo',\n      ([] as any[]),(null as any),(null as any),(null as any),View_CountryDemo_0,RenderType_CountryDemo)),\n      i0.ɵprd(4608,(null as any),i3.Store,i3.Store,[i6.Http]),i0.ɵprd(4608,(null as any),\n          i4.TreeNodeService,i4.TreeNodeService,[i3.Store]),i0.ɵdid(3,114688,(null as any),\n          0,i5.CountryDemo,([] as any[]),(null as any),(null as any))],(_ck,_v) => {\n    _ck(_v,3,0);\n  },(null as any));\n}\nexport const CountryDemoNgFactory:i0.ComponentFactory<i5.CountryDemo> = i0.ɵccf('country-demo',\n    i5.CountryDemo,View_CountryDemo_Host_0,{},{},([] as any[]));\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL3RvcmdlaXJoZWxnZXZvbGQvZGV2ZWxvcG1lbnQvYW5ndWxhci0yLXNhbXBsZXMvY29tcG9uZW50cy9sYXp5LWxvYWRlZC10cmVlLXZpZXcvY291bnRyeS1kZW1vLm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy90b3JnZWlyaGVsZ2V2b2xkL2RldmVsb3BtZW50L2FuZ3VsYXItMi1zYW1wbGVzL2NvbXBvbmVudHMvbGF6eS1sb2FkZWQtdHJlZS12aWV3L2NvdW50cnktZGVtby5uZ2ZhY3RvcnkudHMiLCIvVXNlcnMvdG9yZ2VpcmhlbGdldm9sZC9kZXZlbG9wbWVudC9hbmd1bGFyLTItc2FtcGxlcy9jb21wb25lbnRzL2xhenktbG9hZGVkLXRyZWUtdmlldy9jb3VudHJ5LWRlbW8udHMuQ291bnRyeURlbW8uaHRtbCIsIiJdLCJzb3VyY2VzQ29udGVudCI6WyIgIiwiPGgxPkxhenkgbG9hZGVkIFRyZWVWaWV3IHVzaW5nIFJlZHV4IGFuZCBSeEpzPC9oMT5cbiAgICAgICAgICAgIDxsYXp5LXRyZWUtdmlldyBbcm9vdF09XCJub2RlXCI+PC9sYXp5LXRyZWUtdmlldz4iLCI8Y291bnRyeS1kZW1vPjwvY291bnRyeS1kZW1vPiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JDQUE7TUFBQSx3RUFBSTthQUFBLGtFQUNRO2FBQUE7VUFBQTthQUFBO1VBQUE7O0lBQWdCO0lBQWhCLFdBQWdCLFNBQWhCOzs7O29CQ0RaO01BQUE7YUFBQTtnREFBQSxtQkFBQTtVQUFBO0lBQUE7Ozs7In0=\n\n\n\n// WEBPACK FOOTER //\n// ./app-lazy/aot/components/lazy-loaded-tree-view/country-demo.ngfactory.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule} from '@angular/router';\nimport {HttpModule} from '@angular/http';\n\nimport 'rxjs/add/operator/map';\n\nimport {CountryDemo} from '../../components/lazy-loaded-tree-view/country-demo';\nimport {LazyTreeView} from '../../components/lazy-loaded-tree-view/tree-view';\n\n@NgModule({\n  declarations: [CountryDemo, LazyTreeView],\n  imports: [\n    CommonModule,\n    HttpModule,\n    RouterModule.forChild(\n    [\n      {path: '', component: CountryDemo}\n    ])\n  ]\n})\nexport class LazyTreeviewModule {}\n\n\n// WEBPACK FOOTER //\n// ./app-lazy/lazy-modules/lazy-loaded-treeview.module.ts","export class TreeNode{\n  showIcon = false;\n  expanded = false;\n  icon = null;\n\n  constructor(public key, public url, public name){\n    if(url){\n      this.showIcon = true;\n      this.icon = this.getIcon();\n    }\n  }\n\n  expand(){\n    this.expanded = !this.expanded;\n    this.icon = this.getIcon();\n  }\n\n  private getIcon(){\n    if (this.showIcon === true) {\n      if(this.expanded){\n        return '- ';\n      }\n      return '+ ';\n\n    }\n    return null;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./components/lazy-loaded-tree-view/tree-node.ts","import {TreeNode} from '../tree-node';\n\nexport const treeNodeReducer = (state: any = [], action) => {\n  switch (action.name) {\n\n    case 'LOAD_NODES':\n      return state['nodes'].map(n => {\n        return new TreeNode(n.key,n.url,n.name);\n      });\n\n  }\n};\n\n\n// WEBPACK FOOTER //\n// ./components/lazy-loaded-tree-view/redux/tree-node-reducer.ts","import {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Http,Response} from '@angular/http';\nimport {TreeNode} from '../tree-node';\nimport {treeNodeReducer} from './tree-node-reducer';\n\n@Injectable()\nexport class Store{\n\n  private dispatcher = new Subject<any>();\n  private treeNodes = {};\n\n  private nodes = {};\n\n  constructor(private _http:Http){\n    this.dispatcher.subscribe((action) => this.handleAction(action));\n  }\n\n  private handleAction(action) {\n\n    if(action.name === 'LOAD_NODES') {\n      if (this.nodes[action.key]) {\n        this.treeNodes[action.key].next(this.nodes[action.key]);\n      }\n      else {\n        this._http\n            .get(action.url)\n            .map((res:Response) => res.json())\n            .subscribe(res => {\n              this.nodes[action.key] = treeNodeReducer(res, action);\n              this.treeNodes[action.key].next(this.nodes[action.key]);\n            });\n      }\n    }\n  }\n\n  getTreeNodes(key){\n    if(!this.treeNodes.hasOwnProperty(key)){\n      this.treeNodes[key] = new Subject<Array<TreeNode>>();\n    }\n    return this.treeNodes[key].asObservable();\n  }\n\n  dispatchAction(action){\n    this.dispatcher.next(action);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./components/lazy-loaded-tree-view/redux/store.ts","import {Injectable} from '@angular/core';\nimport {Store} from './redux/store';\n\n@Injectable()\nexport class TreeNodeService{\n\n  constructor(private _store:Store){\n  }\n\n  loadTreeNodes(root){\n    if(root.url) {\n      this._store.dispatchAction({key: root.key, url: root.url, name: 'LOAD_NODES'});\n    }\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./components/lazy-loaded-tree-view/tree-node-service.ts","import {Component, Input, OnInit} from '@angular/core';\nimport {TreeNode} from './tree-node';\nimport {Store} from './redux/store';\nimport {TreeNodeService} from './tree-node-service';\n\n@Component({\n  template: `\n  <ul>\n  <li *ngFor=\"let node of items\">\n\n    <span class=\"iconButton\" [ngClass]='{\"tree-node-no-children\": !node.showIcon}' (click)=\"node.expand()\">{{node.icon}}</span>\n    <span>{{ node.name }}</span>\n\n    <div *ngIf=\"node.expanded\">\n      <lazy-tree-view [root]=\"node\"></lazy-tree-view>\n    </div>\n  </li>\n  </ul>\n`,\n  selector:'lazy-tree-view'\n})\n\nexport class LazyTreeView implements OnInit{\n\n  @Input() root:TreeNode;\n  children:any;\n  items = [];\n  subscription;\n\n  constructor(private _store:Store, private _treeNodeService:TreeNodeService){\n  }\n\n  ngOnInit(){\n    this.subscription = this._store.getTreeNodes(this.root.key).subscribe(res => {\n      this.items = res;\n    });\n    this._treeNodeService.loadTreeNodes(this.root);\n  }\n\n  ngOnDestroy(){\n    this.subscription.unsubscribe();\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./components/lazy-loaded-tree-view/tree-view.ts","import {Component} from '@angular/core';\nimport {TreeNode} from './tree-node';\nimport {Store} from './redux/store';\nimport {TreeNodeService} from './tree-node-service';\n\n@Component({\n  selector:'country-demo',\n  template:`<h1>Lazy loaded TreeView using Redux and RxJs</h1>\n            <lazy-tree-view [root]=\"node\"></lazy-tree-view>`,\n  providers:[Store,TreeNodeService]\n})\n\nexport class CountryDemo{\n  node:TreeNode = null;\n\n  ngOnInit(){\n    this.node = new TreeNode('root','./tree-view-data/countries.json', '');\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./components/lazy-loaded-tree-view/country-demo.ts","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as i0 from '@angular/core';\nimport * as i1 from '../../../lazy-modules/lazy-loaded-treeview.module';\nimport * as i2 from '../../components/lazy-loaded-tree-view/country-demo.ngfactory';\nimport * as i3 from '@angular/common';\nimport * as i4 from '@angular/http';\nimport * as i5 from '@angular/router';\nimport * as i6 from '../../../../components/lazy-loaded-tree-view/country-demo';\nexport const LazyTreeviewModuleNgFactory:i0.NgModuleFactory<i1.LazyTreeviewModule> = i0.ɵcmf(i1.LazyTreeviewModule,\n    ([] as any[]),(_l:any) => {\n      return i0.ɵmod([i0.ɵmpd(512,i0.ComponentFactoryResolver,i0.ɵCodegenComponentFactoryResolver,\n          [[8,[i2.CountryDemoNgFactory]],[3,i0.ComponentFactoryResolver],i0.NgModuleRef]),\n          i0.ɵmpd(4608,i3.NgLocalization,i3.NgLocaleLocalization,[i0.LOCALE_ID,[2,\n              i3.ɵa]]),i0.ɵmpd(4608,i4.BrowserXhr,i4.BrowserXhr,([] as any[])),i0.ɵmpd(4608,\n              i4.ResponseOptions,i4.BaseResponseOptions,([] as any[])),i0.ɵmpd(5120,\n              i4.XSRFStrategy,i4.ɵa,([] as any[])),i0.ɵmpd(4608,i4.XHRBackend,i4.XHRBackend,\n              [i4.BrowserXhr,i4.ResponseOptions,i4.XSRFStrategy]),i0.ɵmpd(4608,i4.RequestOptions,\n              i4.BaseRequestOptions,([] as any[])),i0.ɵmpd(5120,i4.Http,i4.ɵb,[i4.XHRBackend,\n              i4.RequestOptions]),i0.ɵmpd(512,i3.CommonModule,i3.CommonModule,([] as any[])),\n          i0.ɵmpd(512,i4.HttpModule,i4.HttpModule,([] as any[])),i0.ɵmpd(512,i5.RouterModule,\n              i5.RouterModule,[[2,i5.ɵa],[2,i5.Router]]),i0.ɵmpd(512,i1.LazyTreeviewModule,\n              i1.LazyTreeviewModule,([] as any[])),i0.ɵmpd(1024,i5.ROUTES,() => {\n            return [[{path:'',component:i6.CountryDemo}]];\n          },([] as any[]))]);\n    });\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL3RvcmdlaXJoZWxnZXZvbGQvZGV2ZWxvcG1lbnQvYW5ndWxhci0yLXNhbXBsZXMvYXBwLWxhenkvbGF6eS1tb2R1bGVzL2xhenktbG9hZGVkLXRyZWV2aWV3Lm1vZHVsZS5uZ2ZhY3RvcnkudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIvVXNlcnMvdG9yZ2VpcmhlbGdldm9sZC9kZXZlbG9wbWVudC9hbmd1bGFyLTItc2FtcGxlcy9hcHAtbGF6eS9sYXp5LW1vZHVsZXMvbGF6eS1sb2FkZWQtdHJlZXZpZXcubW9kdWxlLm5nZmFjdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIgIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==\n\n\n\n// WEBPACK FOOTER //\n// ./app-lazy/aot/app-lazy/lazy-modules/lazy-loaded-treeview.module.ngfactory.ts","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/map.js\n// module id = 74\n// module chunks = 0 1 2 4 8","/**\n * @license Angular v5.0.0-rc.2\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { Observable } from 'rxjs/Observable';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/** @enum {number} */\nvar RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n/** @enum {number} */\nvar ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n/** @enum {number} */\nvar ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n/** @enum {number} */\nvar ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n/** @enum {number} */\nvar ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Headers = (function () {\n    // TODO(vicb): any -> string|string[]\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var /** @type {?} */ values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     */\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name_1 = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name_1, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     */\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     */\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     */\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     */\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    function () { return Array.from(this._headers.values()); };\n    /**\n     * Returns string of all headers.\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    Headers.prototype.toJSON = /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[/** @type {?} */ ((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     */\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar ResponseOptions = (function () {\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseResponseOptions = (function (_super) {\n    __extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    BaseResponseOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BaseResponseOptions.ctorParameters = function () { return []; };\n    return BaseResponseOptions;\n}(ResponseOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated use \\@angular/common/http instead\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    return XSRFStrategy;\n}());\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * Required structure when constructing new Request();\n * @record\n */\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @deprecated use \\@angular/common/http instead\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated use \\@angular/common/http instead\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar URLSearchParams = (function () {\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) {\n                return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));\n            });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     */\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     */\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     */\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof ArrayBuffer) {\n            return /** @type {?} */ (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n      * Returns the request's body as a Blob, assuming that body exists.\n      */\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    function () {\n        if (this._body instanceof Blob) {\n            return /** @type {?} */ (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Response = (function (_super) {\n    __extends(Response, _super);\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = /** @type {?} */ ((responseOptions.status));\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = /** @type {?} */ ((responseOptions.type));\n        _this.url = /** @type {?} */ ((responseOptions.url));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = /**\n     * @return {?}\n     */\n    function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    BrowserJsonp.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserJsonp.ctorParameters = function () { return []; };\n    return BrowserJsonp;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPConnection = (function () {\n    /** @internal */\n    function JSONPConnection(req, _dom, baseResponseOptions) {\n        var _this = this;\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var /** @type {?} */ id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var /** @type {?} */ callback = _dom.requestCallback(_this._id);\n            var /** @type {?} */ url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var /** @type {?} */ script = _this._script = _dom.build(url);\n            var /** @type {?} */ onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var /** @type {?} */ responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var /** @type {?} */ onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     */\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection;\n}());\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JSONPBackend = (function (_super) {\n    __extends(JSONPBackend, _super);\n    /** @internal */\n    function JSONPBackend(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    JSONPBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JSONPBackend.ctorParameters = function () { return [\n        { type: BrowserJsonp, },\n        { type: ResponseOptions, },\n    ]; };\n    return JSONPBackend;\n}(ConnectionBackend));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRConnection = (function () {\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            var /** @type {?} */ _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var /** @type {?} */ onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var /** @type {?} */ status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var /** @type {?} */ body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var /** @type {?} */ headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var /** @type {?} */ url = getResponseURL(_xhr) || req.url;\n                var /** @type {?} */ statusText = _xhr.statusText || 'OK';\n                var /** @type {?} */ responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var /** @type {?} */ response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var /** @type {?} */ onError = function (err) {\n                var /** @type {?} */ responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(/** @type {?} */ ((name)), values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar CookieXSRFStrategy = (function () {\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var /** @type {?} */ xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated use \\@angular/common/http instead\n */\nvar XHRBackend = (function () {\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = /**\n     * @param {?} request\n     * @return {?}\n     */\n    function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    XHRBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    XHRBackend.ctorParameters = function () { return [\n        { type: BrowserXhr, },\n        { type: ResponseOptions, },\n        { type: XSRFStrategy, },\n    ]; };\n    return XHRBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar RequestOptions = (function () {\n    // TODO(Dzmitry): remove search when this.search is removed\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        get: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         */\n        set: /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     */\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = /**\n     * @param {?=} params\n     * @return {?}\n     */\n    function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar BaseRequestOptions = (function (_super) {\n    __extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    BaseRequestOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BaseRequestOptions.ctorParameters = function () { return []; };\n    return BaseRequestOptions;\n}(RequestOptions));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Request = (function (_super) {\n    __extends(Request, _super);\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var /** @type {?} */ url = requestOptions.url;\n        _this.url = /** @type {?} */ ((requestOptions.url));\n        var /** @type {?} */ paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var /** @type {?} */ params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var /** @type {?} */ prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(/** @type {?} */ ((requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = /** @type {?} */ ((requestOptions.withCredentials));\n        _this.responseType = /** @type {?} */ ((requestOptions.responseType));\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     */\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     */\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     */\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = (/** @type {?} */ (w /** TODO #9100 */) /** TODO #9100 */)['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return /** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return /** @type {?} */ (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar Http = (function () {\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     */\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     */\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     */\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     */\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     */\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     */\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     */\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    Http.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Http.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Http;\n}());\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar Jsonp = (function (_super) {\n    __extends(Jsonp, _super);\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {@link BaseRequestOptions} before performing the request.\n     *\n     * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     */\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    Jsonp.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Jsonp.ctorParameters = function () { return [\n        { type: ConnectionBackend, },\n        { type: RequestOptions, },\n    ]; };\n    return Jsonp;\n}(Http));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    HttpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                        BrowserXhr,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        XHRBackend,\n                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpModule.ctorParameters = function () { return []; };\n    return HttpModule;\n}());\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated use \\@angular/common/http instead\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    JsonpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        // TODO(pascal): use factory type annotations once supported in DI\n                        // issue: https://github.com/angular/angular/issues/3183\n                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                        BrowserJsonp,\n                        { provide: RequestOptions, useClass: BaseRequestOptions },\n                        { provide: ResponseOptions, useClass: BaseResponseOptions },\n                        JSONPBackend,\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    JsonpModule.ctorParameters = function () { return []; };\n    return JsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * @deprecated use \\@angular/common/http instead\n */\nvar VERSION = new Version('5.0.0-rc.2');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as ɵe, Body as ɵf, _createDefaultCookieXSRFStrategy as ɵa, httpFactory as ɵb, jsonpFactory as ɵc };\n//# sourceMappingURL=http.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/http/esm5/http.js\n// module id = 77\n// module chunks = 2 8"],"sourceRoot":""}